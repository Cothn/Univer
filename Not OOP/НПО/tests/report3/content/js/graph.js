/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 189.0, "minX": 0.0, "maxY": 350637.0, "series": [{"data": [[0.0, 189.0], [0.1, 212.0], [0.2, 257.0], [0.3, 316.0], [0.4, 375.0], [0.5, 454.0], [0.6, 542.0], [0.7, 641.0], [0.8, 778.0], [0.9, 1217.0], [1.0, 1443.0], [1.1, 1678.0], [1.2, 1970.0], [1.3, 2362.0], [1.4, 2796.0], [1.5, 3543.0], [1.6, 7302.0], [1.7, 7471.0], [1.8, 7938.0], [1.9, 9470.0], [2.0, 10324.0], [2.1, 11506.0], [2.2, 12042.0], [2.3, 13302.0], [2.4, 13968.0], [2.5, 14400.0], [2.6, 15294.0], [2.7, 16638.0], [2.8, 17227.0], [2.9, 18041.0], [3.0, 18364.0], [3.1, 18413.0], [3.2, 18460.0], [3.3, 18524.0], [3.4, 18690.0], [3.5, 19172.0], [3.6, 19346.0], [3.7, 19807.0], [3.8, 20409.0], [3.9, 20748.0], [4.0, 20894.0], [4.1, 20930.0], [4.2, 20963.0], [4.3, 20990.0], [4.4, 20991.0], [4.5, 20992.0], [4.6, 20992.0], [4.7, 20992.0], [4.8, 20993.0], [4.9, 20993.0], [5.0, 20993.0], [5.1, 20994.0], [5.2, 20994.0], [5.3, 20994.0], [5.4, 20994.0], [5.5, 20994.0], [5.6, 20994.0], [5.7, 20994.0], [5.8, 20995.0], [5.9, 20995.0], [6.0, 20995.0], [6.1, 20995.0], [6.2, 20995.0], [6.3, 20995.0], [6.4, 20995.0], [6.5, 20996.0], [6.6, 20996.0], [6.7, 20996.0], [6.8, 20996.0], [6.9, 20996.0], [7.0, 20996.0], [7.1, 20996.0], [7.2, 20996.0], [7.3, 20996.0], [7.4, 20997.0], [7.5, 20997.0], [7.6, 20997.0], [7.7, 20997.0], [7.8, 20997.0], [7.9, 20997.0], [8.0, 20997.0], [8.1, 20997.0], [8.2, 20997.0], [8.3, 20997.0], [8.4, 20998.0], [8.5, 20998.0], [8.6, 20998.0], [8.7, 20998.0], [8.8, 20998.0], [8.9, 20998.0], [9.0, 20998.0], [9.1, 20998.0], [9.2, 20998.0], [9.3, 20998.0], [9.4, 20998.0], [9.5, 20998.0], [9.6, 20998.0], [9.7, 20998.0], [9.8, 20999.0], [9.9, 20999.0], [10.0, 20999.0], [10.1, 20999.0], [10.2, 20999.0], [10.3, 20999.0], [10.4, 20999.0], [10.5, 20999.0], [10.6, 20999.0], [10.7, 20999.0], [10.8, 20999.0], [10.9, 20999.0], [11.0, 20999.0], [11.1, 20999.0], [11.2, 20999.0], [11.3, 20999.0], [11.4, 21000.0], [11.5, 21000.0], [11.6, 21000.0], [11.7, 21000.0], [11.8, 21000.0], [11.9, 21000.0], [12.0, 21000.0], [12.1, 21000.0], [12.2, 21000.0], [12.3, 21000.0], [12.4, 21000.0], [12.5, 21000.0], [12.6, 21000.0], [12.7, 21000.0], [12.8, 21000.0], [12.9, 21000.0], [13.0, 21000.0], [13.1, 21000.0], [13.2, 21001.0], [13.3, 21001.0], [13.4, 21001.0], [13.5, 21001.0], [13.6, 21001.0], [13.7, 21001.0], [13.8, 21001.0], [13.9, 21001.0], [14.0, 21001.0], [14.1, 21001.0], [14.2, 21001.0], [14.3, 21001.0], [14.4, 21001.0], [14.5, 21001.0], [14.6, 21001.0], [14.7, 21001.0], [14.8, 21002.0], [14.9, 21002.0], [15.0, 21002.0], [15.1, 21002.0], [15.2, 21002.0], [15.3, 21002.0], [15.4, 21002.0], [15.5, 21002.0], [15.6, 21002.0], [15.7, 21002.0], [15.8, 21002.0], [15.9, 21002.0], [16.0, 21003.0], [16.1, 21003.0], [16.2, 21003.0], [16.3, 21003.0], [16.4, 21003.0], [16.5, 21003.0], [16.6, 21003.0], [16.7, 21003.0], [16.8, 21003.0], [16.9, 21003.0], [17.0, 21003.0], [17.1, 21003.0], [17.2, 21003.0], [17.3, 21004.0], [17.4, 21004.0], [17.5, 21004.0], [17.6, 21004.0], [17.7, 21004.0], [17.8, 21004.0], [17.9, 21004.0], [18.0, 21004.0], [18.1, 21004.0], [18.2, 21004.0], [18.3, 21004.0], [18.4, 21004.0], [18.5, 21004.0], [18.6, 21004.0], [18.7, 21004.0], [18.8, 21005.0], [18.9, 21005.0], [19.0, 21005.0], [19.1, 21005.0], [19.2, 21005.0], [19.3, 21005.0], [19.4, 21005.0], [19.5, 21005.0], [19.6, 21005.0], [19.7, 21005.0], [19.8, 21005.0], [19.9, 21005.0], [20.0, 21005.0], [20.1, 21005.0], [20.2, 21005.0], [20.3, 21006.0], [20.4, 21006.0], [20.5, 21006.0], [20.6, 21006.0], [20.7, 21006.0], [20.8, 21006.0], [20.9, 21006.0], [21.0, 21006.0], [21.1, 21006.0], [21.2, 21006.0], [21.3, 21006.0], [21.4, 21006.0], [21.5, 21006.0], [21.6, 21006.0], [21.7, 21006.0], [21.8, 21006.0], [21.9, 21006.0], [22.0, 21006.0], [22.1, 21006.0], [22.2, 21007.0], [22.3, 21007.0], [22.4, 21007.0], [22.5, 21007.0], [22.6, 21007.0], [22.7, 21007.0], [22.8, 21007.0], [22.9, 21007.0], [23.0, 21007.0], [23.1, 21007.0], [23.2, 21007.0], [23.3, 21007.0], [23.4, 21007.0], [23.5, 21007.0], [23.6, 21007.0], [23.7, 21007.0], [23.8, 21007.0], [23.9, 21007.0], [24.0, 21007.0], [24.1, 21007.0], [24.2, 21008.0], [24.3, 21008.0], [24.4, 21008.0], [24.5, 21008.0], [24.6, 21008.0], [24.7, 21008.0], [24.8, 21008.0], [24.9, 21008.0], [25.0, 21008.0], [25.1, 21008.0], [25.2, 21008.0], [25.3, 21008.0], [25.4, 21008.0], [25.5, 21008.0], [25.6, 21008.0], [25.7, 21008.0], [25.8, 21008.0], [25.9, 21008.0], [26.0, 21008.0], [26.1, 21008.0], [26.2, 21008.0], [26.3, 21008.0], [26.4, 21008.0], [26.5, 21008.0], [26.6, 21009.0], [26.7, 21009.0], [26.8, 21009.0], [26.9, 21009.0], [27.0, 21009.0], [27.1, 21009.0], [27.2, 21009.0], [27.3, 21009.0], [27.4, 21009.0], [27.5, 21009.0], [27.6, 21009.0], [27.7, 21009.0], [27.8, 21009.0], [27.9, 21009.0], [28.0, 21009.0], [28.1, 21009.0], [28.2, 21009.0], [28.3, 21009.0], [28.4, 21009.0], [28.5, 21009.0], [28.6, 21009.0], [28.7, 21010.0], [28.8, 21010.0], [28.9, 21010.0], [29.0, 21010.0], [29.1, 21010.0], [29.2, 21010.0], [29.3, 21010.0], [29.4, 21010.0], [29.5, 21010.0], [29.6, 21010.0], [29.7, 21010.0], [29.8, 21010.0], [29.9, 21010.0], [30.0, 21010.0], [30.1, 21010.0], [30.2, 21010.0], [30.3, 21010.0], [30.4, 21010.0], [30.5, 21010.0], [30.6, 21010.0], [30.7, 21011.0], [30.8, 21011.0], [30.9, 21011.0], [31.0, 21011.0], [31.1, 21011.0], [31.2, 21011.0], [31.3, 21011.0], [31.4, 21011.0], [31.5, 21011.0], [31.6, 21011.0], [31.7, 21011.0], [31.8, 21011.0], [31.9, 21011.0], [32.0, 21011.0], [32.1, 21011.0], [32.2, 21011.0], [32.3, 21011.0], [32.4, 21011.0], [32.5, 21011.0], [32.6, 21011.0], [32.7, 21011.0], [32.8, 21012.0], [32.9, 21012.0], [33.0, 21012.0], [33.1, 21012.0], [33.2, 21012.0], [33.3, 21012.0], [33.4, 21012.0], [33.5, 21012.0], [33.6, 21012.0], [33.7, 21012.0], [33.8, 21012.0], [33.9, 21012.0], [34.0, 21012.0], [34.1, 21012.0], [34.2, 21012.0], [34.3, 21012.0], [34.4, 21012.0], [34.5, 21012.0], [34.6, 21013.0], [34.7, 21013.0], [34.8, 21013.0], [34.9, 21013.0], [35.0, 21013.0], [35.1, 21013.0], [35.2, 21013.0], [35.3, 21013.0], [35.4, 21013.0], [35.5, 21013.0], [35.6, 21013.0], [35.7, 21013.0], [35.8, 21013.0], [35.9, 21014.0], [36.0, 21014.0], [36.1, 21014.0], [36.2, 21014.0], [36.3, 21014.0], [36.4, 21014.0], [36.5, 21014.0], [36.6, 21014.0], [36.7, 21014.0], [36.8, 21014.0], [36.9, 21014.0], [37.0, 21014.0], [37.1, 21015.0], [37.2, 21015.0], [37.3, 21015.0], [37.4, 21015.0], [37.5, 21015.0], [37.6, 21015.0], [37.7, 21015.0], [37.8, 21015.0], [37.9, 21015.0], [38.0, 21015.0], [38.1, 21015.0], [38.2, 21016.0], [38.3, 21016.0], [38.4, 21016.0], [38.5, 21016.0], [38.6, 21016.0], [38.7, 21016.0], [38.8, 21016.0], [38.9, 21016.0], [39.0, 21016.0], [39.1, 21016.0], [39.2, 21016.0], [39.3, 21017.0], [39.4, 21017.0], [39.5, 21017.0], [39.6, 21017.0], [39.7, 21017.0], [39.8, 21017.0], [39.9, 21017.0], [40.0, 21017.0], [40.1, 21017.0], [40.2, 21017.0], [40.3, 21017.0], [40.4, 21017.0], [40.5, 21018.0], [40.6, 21018.0], [40.7, 21018.0], [40.8, 21018.0], [40.9, 21018.0], [41.0, 21018.0], [41.1, 21018.0], [41.2, 21018.0], [41.3, 21018.0], [41.4, 21018.0], [41.5, 21018.0], [41.6, 21018.0], [41.7, 21018.0], [41.8, 21018.0], [41.9, 21018.0], [42.0, 21018.0], [42.1, 21019.0], [42.2, 21019.0], [42.3, 21019.0], [42.4, 21019.0], [42.5, 21019.0], [42.6, 21019.0], [42.7, 21019.0], [42.8, 21019.0], [42.9, 21019.0], [43.0, 21019.0], [43.1, 21019.0], [43.2, 21019.0], [43.3, 21019.0], [43.4, 21019.0], [43.5, 21019.0], [43.6, 21019.0], [43.7, 21020.0], [43.8, 21020.0], [43.9, 21020.0], [44.0, 21020.0], [44.1, 21020.0], [44.2, 21020.0], [44.3, 21020.0], [44.4, 21020.0], [44.5, 21020.0], [44.6, 21020.0], [44.7, 21020.0], [44.8, 21020.0], [44.9, 21021.0], [45.0, 21021.0], [45.1, 21021.0], [45.2, 21021.0], [45.3, 21021.0], [45.4, 21021.0], [45.5, 21021.0], [45.6, 21021.0], [45.7, 21021.0], [45.8, 21021.0], [45.9, 21021.0], [46.0, 21021.0], [46.1, 21021.0], [46.2, 21022.0], [46.3, 21022.0], [46.4, 21022.0], [46.5, 21022.0], [46.6, 21022.0], [46.7, 21022.0], [46.8, 21022.0], [46.9, 21022.0], [47.0, 21022.0], [47.1, 21022.0], [47.2, 21022.0], [47.3, 21022.0], [47.4, 21023.0], [47.5, 21023.0], [47.6, 21023.0], [47.7, 21023.0], [47.8, 21023.0], [47.9, 21023.0], [48.0, 21023.0], [48.1, 21023.0], [48.2, 21023.0], [48.3, 21023.0], [48.4, 21024.0], [48.5, 21024.0], [48.6, 21024.0], [48.7, 21024.0], [48.8, 21024.0], [48.9, 21024.0], [49.0, 21024.0], [49.1, 21024.0], [49.2, 21025.0], [49.3, 21025.0], [49.4, 21025.0], [49.5, 21025.0], [49.6, 21025.0], [49.7, 21025.0], [49.8, 21025.0], [49.9, 21026.0], [50.0, 21026.0], [50.1, 21026.0], [50.2, 21026.0], [50.3, 21026.0], [50.4, 21026.0], [50.5, 21027.0], [50.6, 21027.0], [50.7, 21027.0], [50.8, 21027.0], [50.9, 21027.0], [51.0, 21027.0], [51.1, 21027.0], [51.2, 21027.0], [51.3, 21028.0], [51.4, 21028.0], [51.5, 21028.0], [51.6, 21028.0], [51.7, 21028.0], [51.8, 21028.0], [51.9, 21029.0], [52.0, 21029.0], [52.1, 21029.0], [52.2, 21029.0], [52.3, 21029.0], [52.4, 21029.0], [52.5, 21029.0], [52.6, 21030.0], [52.7, 21030.0], [52.8, 21030.0], [52.9, 21030.0], [53.0, 21030.0], [53.1, 21031.0], [53.2, 21031.0], [53.3, 21031.0], [53.4, 21031.0], [53.5, 21031.0], [53.6, 21032.0], [53.7, 21032.0], [53.8, 21032.0], [53.9, 21032.0], [54.0, 21032.0], [54.1, 21033.0], [54.2, 21033.0], [54.3, 21033.0], [54.4, 21033.0], [54.5, 21034.0], [54.6, 21034.0], [54.7, 21034.0], [54.8, 21034.0], [54.9, 21034.0], [55.0, 21034.0], [55.1, 21035.0], [55.2, 21035.0], [55.3, 21035.0], [55.4, 21035.0], [55.5, 21035.0], [55.6, 21036.0], [55.7, 21036.0], [55.8, 21036.0], [55.9, 21036.0], [56.0, 21037.0], [56.1, 21037.0], [56.2, 21037.0], [56.3, 21037.0], [56.4, 21037.0], [56.5, 21038.0], [56.6, 21038.0], [56.7, 21038.0], [56.8, 21038.0], [56.9, 21038.0], [57.0, 21038.0], [57.1, 21039.0], [57.2, 21039.0], [57.3, 21039.0], [57.4, 21039.0], [57.5, 21039.0], [57.6, 21040.0], [57.7, 21040.0], [57.8, 21040.0], [57.9, 21040.0], [58.0, 21040.0], [58.1, 21040.0], [58.2, 21041.0], [58.3, 21041.0], [58.4, 21041.0], [58.5, 21041.0], [58.6, 21042.0], [58.7, 21042.0], [58.8, 21042.0], [58.9, 21042.0], [59.0, 21043.0], [59.1, 21043.0], [59.2, 21043.0], [59.3, 21043.0], [59.4, 21043.0], [59.5, 21044.0], [59.6, 21044.0], [59.7, 21044.0], [59.8, 21044.0], [59.9, 21045.0], [60.0, 21045.0], [60.1, 21045.0], [60.2, 21045.0], [60.3, 21046.0], [60.4, 21046.0], [60.5, 21046.0], [60.6, 21046.0], [60.7, 21046.0], [60.8, 21046.0], [60.9, 21047.0], [61.0, 21047.0], [61.1, 21047.0], [61.2, 21047.0], [61.3, 21047.0], [61.4, 21048.0], [61.5, 21048.0], [61.6, 21048.0], [61.7, 21048.0], [61.8, 21049.0], [61.9, 21049.0], [62.0, 21049.0], [62.1, 21049.0], [62.2, 21050.0], [62.3, 21050.0], [62.4, 21050.0], [62.5, 21051.0], [62.6, 21051.0], [62.7, 21051.0], [62.8, 21051.0], [62.9, 21051.0], [63.0, 21052.0], [63.1, 21052.0], [63.2, 21052.0], [63.3, 21053.0], [63.4, 21053.0], [63.5, 21053.0], [63.6, 21054.0], [63.7, 21054.0], [63.8, 21054.0], [63.9, 21054.0], [64.0, 21055.0], [64.1, 21055.0], [64.2, 21056.0], [64.3, 21056.0], [64.4, 21057.0], [64.5, 21057.0], [64.6, 21057.0], [64.7, 21058.0], [64.8, 21058.0], [64.9, 21058.0], [65.0, 21059.0], [65.1, 21059.0], [65.2, 21060.0], [65.3, 21060.0], [65.4, 21060.0], [65.5, 21061.0], [65.6, 21061.0], [65.7, 21061.0], [65.8, 21062.0], [65.9, 21062.0], [66.0, 21062.0], [66.1, 21063.0], [66.2, 21063.0], [66.3, 21064.0], [66.4, 21064.0], [66.5, 21065.0], [66.6, 21065.0], [66.7, 21065.0], [66.8, 21066.0], [66.9, 21066.0], [67.0, 21066.0], [67.1, 21067.0], [67.2, 21067.0], [67.3, 21068.0], [67.4, 21068.0], [67.5, 21069.0], [67.6, 21069.0], [67.7, 21069.0], [67.8, 21070.0], [67.9, 21070.0], [68.0, 21071.0], [68.1, 21071.0], [68.2, 21072.0], [68.3, 21072.0], [68.4, 21073.0], [68.5, 21073.0], [68.6, 21074.0], [68.7, 21074.0], [68.8, 21075.0], [68.9, 21076.0], [69.0, 21076.0], [69.1, 21077.0], [69.2, 21078.0], [69.3, 21078.0], [69.4, 21079.0], [69.5, 21080.0], [69.6, 21080.0], [69.7, 21081.0], [69.8, 21081.0], [69.9, 21082.0], [70.0, 21083.0], [70.1, 21084.0], [70.2, 21085.0], [70.3, 21086.0], [70.4, 21087.0], [70.5, 21088.0], [70.6, 21088.0], [70.7, 21089.0], [70.8, 21091.0], [70.9, 21092.0], [71.0, 21092.0], [71.1, 21094.0], [71.2, 21095.0], [71.3, 21097.0], [71.4, 21097.0], [71.5, 21098.0], [71.6, 21099.0], [71.7, 21100.0], [71.8, 21101.0], [71.9, 21103.0], [72.0, 21103.0], [72.1, 21104.0], [72.2, 21105.0], [72.3, 21108.0], [72.4, 21108.0], [72.5, 21109.0], [72.6, 21110.0], [72.7, 21111.0], [72.8, 21112.0], [72.9, 21113.0], [73.0, 21114.0], [73.1, 21115.0], [73.2, 21116.0], [73.3, 21117.0], [73.4, 21118.0], [73.5, 21119.0], [73.6, 21120.0], [73.7, 21121.0], [73.8, 21122.0], [73.9, 21123.0], [74.0, 21124.0], [74.1, 21126.0], [74.2, 21127.0], [74.3, 21130.0], [74.4, 21132.0], [74.5, 21135.0], [74.6, 21139.0], [74.7, 21144.0], [74.8, 21146.0], [74.9, 21149.0], [75.0, 21152.0], [75.1, 21154.0], [75.2, 21157.0], [75.3, 21159.0], [75.4, 21161.0], [75.5, 21165.0], [75.6, 21167.0], [75.7, 21173.0], [75.8, 21175.0], [75.9, 21176.0], [76.0, 21183.0], [76.1, 21187.0], [76.2, 21190.0], [76.3, 21194.0], [76.4, 21200.0], [76.5, 21206.0], [76.6, 21212.0], [76.7, 21217.0], [76.8, 21222.0], [76.9, 21229.0], [77.0, 21234.0], [77.1, 21237.0], [77.2, 21239.0], [77.3, 21242.0], [77.4, 21244.0], [77.5, 21251.0], [77.6, 21256.0], [77.7, 21260.0], [77.8, 21268.0], [77.9, 21275.0], [78.0, 21279.0], [78.1, 21280.0], [78.2, 21286.0], [78.3, 21292.0], [78.4, 21298.0], [78.5, 21304.0], [78.6, 21310.0], [78.7, 21313.0], [78.8, 21318.0], [78.9, 21324.0], [79.0, 21331.0], [79.1, 21340.0], [79.2, 21351.0], [79.3, 21361.0], [79.4, 21373.0], [79.5, 21378.0], [79.6, 21386.0], [79.7, 21390.0], [79.8, 21399.0], [79.9, 21417.0], [80.0, 21428.0], [80.1, 21445.0], [80.2, 21464.0], [80.3, 21485.0], [80.4, 21503.0], [80.5, 21526.0], [80.6, 21540.0], [80.7, 21546.0], [80.8, 21552.0], [80.9, 21555.0], [81.0, 21560.0], [81.1, 21564.0], [81.2, 21568.0], [81.3, 21571.0], [81.4, 21574.0], [81.5, 21577.0], [81.6, 21578.0], [81.7, 21581.0], [81.8, 21584.0], [81.9, 21586.0], [82.0, 21588.0], [82.1, 21589.0], [82.2, 21590.0], [82.3, 21593.0], [82.4, 21594.0], [82.5, 21597.0], [82.6, 21598.0], [82.7, 21599.0], [82.8, 21601.0], [82.9, 21601.0], [83.0, 21602.0], [83.1, 21604.0], [83.2, 21605.0], [83.3, 21607.0], [83.4, 21608.0], [83.5, 21610.0], [83.6, 21611.0], [83.7, 21615.0], [83.8, 21617.0], [83.9, 21620.0], [84.0, 21622.0], [84.1, 21623.0], [84.2, 21625.0], [84.3, 21629.0], [84.4, 21636.0], [84.5, 21642.0], [84.6, 21661.0], [84.7, 21754.0], [84.8, 21849.0], [84.9, 21869.0], [85.0, 21892.0], [85.1, 22001.0], [85.2, 22339.0], [85.3, 22602.0], [85.4, 23015.0], [85.5, 23023.0], [85.6, 23028.0], [85.7, 23032.0], [85.8, 23037.0], [85.9, 23041.0], [86.0, 23044.0], [86.1, 23048.0], [86.2, 23056.0], [86.3, 23088.0], [86.4, 23146.0], [86.5, 23160.0], [86.6, 23169.0], [86.7, 23207.0], [86.8, 23270.0], [86.9, 23433.0], [87.0, 23652.0], [87.1, 23901.0], [87.2, 24464.0], [87.3, 24890.0], [87.4, 24905.0], [87.5, 24940.0], [87.6, 25006.0], [87.7, 25084.0], [87.8, 25093.0], [87.9, 25737.0], [88.0, 25930.0], [88.1, 26000.0], [88.2, 26003.0], [88.3, 26008.0], [88.4, 26203.0], [88.5, 26545.0], [88.6, 27151.0], [88.7, 27815.0], [88.8, 28165.0], [88.9, 29126.0], [89.0, 29863.0], [89.1, 30730.0], [89.2, 31413.0], [89.3, 31997.0], [89.4, 32693.0], [89.5, 33013.0], [89.6, 33329.0], [89.7, 33508.0], [89.8, 33761.0], [89.9, 33950.0], [90.0, 34433.0], [90.1, 34551.0], [90.2, 35373.0], [90.3, 36636.0], [90.4, 36924.0], [90.5, 37259.0], [90.6, 37470.0], [90.7, 37916.0], [90.8, 38246.0], [90.9, 38661.0], [91.0, 39001.0], [91.1, 39292.0], [91.2, 39988.0], [91.3, 40594.0], [91.4, 40778.0], [91.5, 40985.0], [91.6, 41524.0], [91.7, 42254.0], [91.8, 42980.0], [91.9, 43393.0], [92.0, 43667.0], [92.1, 43944.0], [92.2, 44395.0], [92.3, 44845.0], [92.4, 45857.0], [92.5, 46337.0], [92.6, 46463.0], [92.7, 46645.0], [92.8, 47188.0], [92.9, 47511.0], [93.0, 47824.0], [93.1, 48099.0], [93.2, 48214.0], [93.3, 48391.0], [93.4, 48571.0], [93.5, 48767.0], [93.6, 48870.0], [93.7, 49164.0], [93.8, 49667.0], [93.9, 50785.0], [94.0, 51487.0], [94.1, 52245.0], [94.2, 52734.0], [94.3, 54054.0], [94.4, 54169.0], [94.5, 54270.0], [94.6, 54751.0], [94.7, 54839.0], [94.8, 55664.0], [94.9, 56179.0], [95.0, 57423.0], [95.1, 58051.0], [95.2, 59104.0], [95.3, 59729.0], [95.4, 60321.0], [95.5, 61188.0], [95.6, 62303.0], [95.7, 64208.0], [95.8, 65580.0], [95.9, 66681.0], [96.0, 66960.0], [96.1, 67644.0], [96.2, 68068.0], [96.3, 68591.0], [96.4, 68825.0], [96.5, 69056.0], [96.6, 69424.0], [96.7, 69804.0], [96.8, 70217.0], [96.9, 70369.0], [97.0, 70611.0], [97.1, 70914.0], [97.2, 72043.0], [97.3, 72822.0], [97.4, 74053.0], [97.5, 74919.0], [97.6, 76712.0], [97.7, 81337.0], [97.8, 82137.0], [97.9, 85351.0], [98.0, 95064.0], [98.1, 106430.0], [98.2, 121019.0], [98.3, 158623.0], [98.4, 158708.0], [98.5, 158801.0], [98.6, 158931.0], [98.7, 164498.0], [98.8, 164956.0], [98.9, 170927.0], [99.0, 171142.0], [99.1, 171341.0], [99.2, 172752.0], [99.3, 236612.0], [99.4, 245984.0], [99.5, 268002.0], [99.6, 347842.0], [99.7, 347961.0], [99.8, 348018.0], [99.9, 350477.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 100.0, "maxY": 5903.0, "series": [{"data": [[170400.0, 1.0], [167200.0, 3.0], [164900.0, 2.0], [171300.0, 2.0], [238500.0, 1.0], [66700.0, 3.0], [68300.0, 1.0], [69900.0, 2.0], [71500.0, 1.0], [73100.0, 2.0], [74700.0, 1.0], [93900.0, 1.0], [122700.0, 1.0], [265300.0, 1.0], [239400.0, 1.0], [100.0, 8.0], [33700.0, 4.0], [32900.0, 1.0], [34500.0, 7.0], [35300.0, 5.0], [36100.0, 1.0], [37700.0, 2.0], [36900.0, 9.0], [38500.0, 1.0], [40900.0, 4.0], [40100.0, 2.0], [41700.0, 1.0], [42500.0, 1.0], [43300.0, 2.0], [44100.0, 3.0], [350300.0, 5.0], [46500.0, 5.0], [48100.0, 8.0], [48900.0, 3.0], [47300.0, 3.0], [50500.0, 1.0], [49700.0, 1.0], [52100.0, 4.0], [52900.0, 2.0], [51300.0, 1.0], [200.0, 18.0], [54500.0, 2.0], [56100.0, 1.0], [59300.0, 1.0], [60100.0, 2.0], [61700.0, 4.0], [63300.0, 1.0], [64100.0, 3.0], [64900.0, 1.0], [65800.0, 1.0], [69000.0, 9.0], [67400.0, 1.0], [70600.0, 6.0], [73800.0, 1.0], [75400.0, 1.0], [300.0, 16.0], [400.0, 11.0], [120200.0, 1.0], [500.0, 14.0], [128200.0, 1.0], [600.0, 10.0], [164400.0, 1.0], [170800.0, 2.0], [700.0, 2.0], [800.0, 3.0], [900.0, 3.0], [1000.0, 1.0], [1100.0, 2.0], [1200.0, 4.0], [1300.0, 4.0], [1400.0, 2.0], [348000.0, 3.0], [1500.0, 5.0], [1600.0, 7.0], [1700.0, 3.0], [1800.0, 1.0], [1900.0, 4.0], [2000.0, 3.0], [2100.0, 3.0], [2300.0, 4.0], [2200.0, 1.0], [2400.0, 1.0], [158900.0, 9.0], [2500.0, 1.0], [2600.0, 2.0], [2700.0, 5.0], [2800.0, 2.0], [2900.0, 1.0], [3000.0, 2.0], [3300.0, 1.0], [3200.0, 2.0], [3400.0, 1.0], [3500.0, 2.0], [3600.0, 1.0], [3700.0, 1.0], [238900.0, 1.0], [242100.0, 1.0], [68100.0, 3.0], [4100.0, 1.0], [266600.0, 1.0], [72900.0, 2.0], [71300.0, 1.0], [69700.0, 1.0], [74500.0, 1.0], [82500.0, 2.0], [5400.0, 1.0], [6500.0, 1.0], [6700.0, 1.0], [7000.0, 1.0], [7300.0, 4.0], [7400.0, 10.0], [7500.0, 1.0], [7600.0, 1.0], [7700.0, 4.0], [7900.0, 2.0], [8100.0, 1.0], [8400.0, 1.0], [9200.0, 1.0], [9600.0, 2.0], [9400.0, 4.0], [9800.0, 1.0], [10000.0, 2.0], [10200.0, 3.0], [10400.0, 1.0], [10600.0, 2.0], [11200.0, 1.0], [11600.0, 3.0], [11800.0, 1.0], [12000.0, 1.0], [12400.0, 2.0], [12800.0, 1.0], [13800.0, 4.0], [14000.0, 2.0], [14200.0, 1.0], [14600.0, 1.0], [14400.0, 2.0], [236600.0, 2.0], [15000.0, 3.0], [15200.0, 2.0], [15400.0, 2.0], [15800.0, 2.0], [16200.0, 2.0], [17200.0, 4.0], [16800.0, 1.0], [18400.0, 13.0], [18000.0, 2.0], [19200.0, 4.0], [18800.0, 1.0], [20000.0, 1.0], [20400.0, 3.0], [19600.0, 1.0], [20800.0, 6.0], [21200.0, 202.0], [21600.0, 192.0], [22400.0, 3.0], [22000.0, 5.0], [23200.0, 13.0], [22800.0, 1.0], [24400.0, 2.0], [24000.0, 3.0], [23600.0, 1.0], [24800.0, 16.0], [25200.0, 4.0], [26000.0, 30.0], [26400.0, 1.0], [28000.0, 3.0], [29200.0, 4.0], [29600.0, 3.0], [28800.0, 1.0], [30400.0, 2.0], [30000.0, 1.0], [31200.0, 1.0], [31600.0, 1.0], [32000.0, 1.0], [32400.0, 1.0], [34400.0, 5.0], [33600.0, 4.0], [32800.0, 4.0], [35200.0, 1.0], [36000.0, 1.0], [36800.0, 2.0], [38400.0, 5.0], [37600.0, 1.0], [40800.0, 5.0], [40000.0, 1.0], [39200.0, 2.0], [42400.0, 1.0], [44000.0, 2.0], [43200.0, 2.0], [44800.0, 1.0], [46400.0, 7.0], [45600.0, 2.0], [48800.0, 8.0], [47200.0, 2.0], [48000.0, 3.0], [49600.0, 3.0], [51200.0, 3.0], [52800.0, 1.0], [52000.0, 1.0], [56800.0, 2.0], [56000.0, 1.0], [58400.0, 1.0], [59200.0, 2.0], [57600.0, 2.0], [60800.0, 2.0], [60000.0, 2.0], [64800.0, 1.0], [67200.0, 1.0], [68800.0, 3.0], [70400.0, 4.0], [72000.0, 2.0], [73600.0, 1.0], [78400.0, 1.0], [80000.0, 2.0], [91200.0, 1.0], [97600.0, 1.0], [107200.0, 1.0], [224900.0, 1.0], [68700.0, 3.0], [67100.0, 1.0], [70300.0, 4.0], [71900.0, 4.0], [76700.0, 1.0], [81500.0, 1.0], [84700.0, 1.0], [92700.0, 2.0], [123100.0, 1.0], [158600.0, 8.0], [161800.0, 2.0], [171400.0, 1.0], [33100.0, 2.0], [33900.0, 3.0], [34700.0, 1.0], [35500.0, 1.0], [37100.0, 2.0], [37900.0, 3.0], [38700.0, 2.0], [40300.0, 3.0], [41100.0, 3.0], [42700.0, 2.0], [41900.0, 1.0], [43500.0, 4.0], [44300.0, 3.0], [45100.0, 1.0], [46700.0, 2.0], [45900.0, 1.0], [48300.0, 4.0], [49100.0, 5.0], [47500.0, 5.0], [50700.0, 2.0], [49900.0, 1.0], [52300.0, 1.0], [54700.0, 7.0], [53900.0, 1.0], [57100.0, 1.0], [56300.0, 2.0], [57900.0, 2.0], [58700.0, 1.0], [59500.0, 2.0], [61100.0, 3.0], [60300.0, 5.0], [245900.0, 1.0], [65100.0, 1.0], [69400.0, 3.0], [67800.0, 2.0], [72600.0, 2.0], [77400.0, 1.0], [80600.0, 1.0], [79000.0, 2.0], [95000.0, 1.0], [115800.0, 1.0], [305700.0, 1.0], [350500.0, 5.0], [243600.0, 1.0], [158100.0, 1.0], [170900.0, 1.0], [247700.0, 1.0], [68500.0, 3.0], [66900.0, 1.0], [70100.0, 2.0], [73300.0, 1.0], [74900.0, 1.0], [81300.0, 3.0], [82900.0, 1.0], [119700.0, 2.0], [143000.0, 1.0], [159000.0, 1.0], [171800.0, 3.0], [347700.0, 2.0], [17300.0, 1.0], [18500.0, 15.0], [19300.0, 7.0], [18900.0, 1.0], [20100.0, 1.0], [20900.0, 721.0], [21300.0, 134.0], [20500.0, 2.0], [21700.0, 11.0], [22500.0, 3.0], [22100.0, 3.0], [23300.0, 3.0], [23700.0, 2.0], [24100.0, 2.0], [25300.0, 2.0], [24900.0, 20.0], [25700.0, 10.0], [26100.0, 1.0], [26500.0, 1.0], [27300.0, 2.0], [26900.0, 1.0], [28500.0, 4.0], [27700.0, 3.0], [28100.0, 1.0], [29300.0, 1.0], [30500.0, 1.0], [29700.0, 1.0], [30100.0, 1.0], [31300.0, 5.0], [30900.0, 1.0], [31700.0, 1.0], [32100.0, 2.0], [32500.0, 2.0], [33000.0, 5.0], [34600.0, 2.0], [33800.0, 8.0], [38600.0, 3.0], [37800.0, 4.0], [37000.0, 2.0], [39400.0, 2.0], [40200.0, 2.0], [41000.0, 1.0], [43400.0, 4.0], [44200.0, 2.0], [45000.0, 2.0], [172700.0, 10.0], [46600.0, 3.0], [45800.0, 1.0], [48200.0, 8.0], [49000.0, 2.0], [47400.0, 2.0], [52200.0, 7.0], [51400.0, 2.0], [54600.0, 4.0], [53800.0, 2.0], [55400.0, 1.0], [56200.0, 1.0], [57800.0, 1.0], [58600.0, 1.0], [59400.0, 1.0], [61000.0, 2.0], [62600.0, 2.0], [61800.0, 1.0], [64200.0, 2.0], [65000.0, 2.0], [69200.0, 1.0], [67600.0, 5.0], [66000.0, 1.0], [72400.0, 2.0], [70800.0, 2.0], [74000.0, 1.0], [78800.0, 1.0], [82000.0, 1.0], [93200.0, 2.0], [106000.0, 1.0], [350400.0, 7.0], [266700.0, 1.0], [227300.0, 1.0], [236900.0, 1.0], [65900.0, 3.0], [67500.0, 1.0], [69100.0, 3.0], [70700.0, 1.0], [72300.0, 2.0], [75500.0, 1.0], [81900.0, 3.0], [88300.0, 1.0], [128300.0, 1.0], [33300.0, 4.0], [34100.0, 2.0], [263900.0, 1.0], [34900.0, 1.0], [38100.0, 4.0], [38900.0, 4.0], [37300.0, 3.0], [39700.0, 3.0], [40500.0, 1.0], [158700.0, 11.0], [161900.0, 1.0], [41300.0, 2.0], [42100.0, 3.0], [42900.0, 2.0], [44500.0, 4.0], [43700.0, 2.0], [46100.0, 2.0], [46900.0, 1.0], [47700.0, 2.0], [48500.0, 7.0], [50900.0, 1.0], [52500.0, 1.0], [54100.0, 12.0], [53300.0, 1.0], [55700.0, 3.0], [56500.0, 2.0], [57300.0, 1.0], [59700.0, 6.0], [62900.0, 1.0], [64500.0, 1.0], [66600.0, 4.0], [68200.0, 2.0], [69800.0, 2.0], [73000.0, 1.0], [74600.0, 3.0], [76200.0, 1.0], [82600.0, 1.0], [90600.0, 2.0], [95400.0, 1.0], [98600.0, 1.0], [121000.0, 1.0], [268000.0, 1.0], [293600.0, 1.0], [65700.0, 1.0], [68900.0, 3.0], [67300.0, 1.0], [70500.0, 4.0], [81700.0, 1.0], [9300.0, 3.0], [10300.0, 1.0], [10500.0, 1.0], [10700.0, 2.0], [164600.0, 5.0], [171000.0, 8.0], [11700.0, 1.0], [11300.0, 1.0], [11500.0, 3.0], [11900.0, 2.0], [12100.0, 2.0], [12700.0, 1.0], [12500.0, 1.0], [13300.0, 4.0], [12900.0, 1.0], [13100.0, 1.0], [13700.0, 2.0], [14100.0, 2.0], [14300.0, 3.0], [13900.0, 2.0], [14700.0, 1.0], [15300.0, 2.0], [15100.0, 1.0], [15500.0, 1.0], [17400.0, 3.0], [17000.0, 2.0], [16600.0, 1.0], [265200.0, 1.0], [18200.0, 3.0], [17800.0, 1.0], [18600.0, 3.0], [19400.0, 4.0], [19000.0, 3.0], [19800.0, 5.0], [20200.0, 1.0], [21400.0, 56.0], [21000.0, 5903.0], [20600.0, 3.0], [21800.0, 25.0], [22200.0, 2.0], [22600.0, 5.0], [23000.0, 96.0], [23400.0, 15.0], [23800.0, 6.0], [24200.0, 1.0], [24600.0, 1.0], [25000.0, 22.0], [26200.0, 8.0], [26600.0, 2.0], [25800.0, 1.0], [27400.0, 2.0], [28600.0, 1.0], [27800.0, 6.0], [28200.0, 1.0], [29000.0, 1.0], [30600.0, 1.0], [29800.0, 1.0], [31400.0, 3.0], [31000.0, 1.0], [32600.0, 3.0], [31800.0, 4.0], [33200.0, 4.0], [34000.0, 3.0], [38800.0, 2.0], [38000.0, 2.0], [37200.0, 3.0], [40400.0, 1.0], [39600.0, 2.0], [155900.0, 1.0], [42000.0, 2.0], [42800.0, 1.0], [43600.0, 2.0], [44400.0, 1.0], [347900.0, 14.0], [45200.0, 1.0], [46800.0, 2.0], [48400.0, 5.0], [47600.0, 2.0], [50800.0, 2.0], [49200.0, 1.0], [50000.0, 1.0], [51600.0, 2.0], [53200.0, 2.0], [54000.0, 2.0], [54800.0, 7.0], [55600.0, 4.0], [58000.0, 1.0], [59600.0, 1.0], [62800.0, 1.0], [62000.0, 2.0], [64400.0, 1.0], [69600.0, 3.0], [66400.0, 1.0], [68000.0, 4.0], [267000.0, 1.0], [72800.0, 1.0], [279800.0, 1.0], [74400.0, 3.0], [101600.0, 1.0], [106400.0, 1.0], [114400.0, 1.0], [171200.0, 8.0], [241600.0, 1.0], [69500.0, 4.0], [67900.0, 1.0], [72700.0, 2.0], [75900.0, 2.0], [350600.0, 2.0], [106300.0, 1.0], [114300.0, 1.0], [112700.0, 1.0], [137800.0, 1.0], [266900.0, 1.0], [288400.0, 1.0], [33500.0, 4.0], [35100.0, 1.0], [35900.0, 1.0], [36700.0, 2.0], [37500.0, 2.0], [39100.0, 6.0], [40700.0, 5.0], [39900.0, 2.0], [41500.0, 3.0], [42300.0, 3.0], [170700.0, 2.0], [43900.0, 5.0], [43100.0, 2.0], [44700.0, 2.0], [173900.0, 1.0], [46300.0, 6.0], [47100.0, 4.0], [45500.0, 1.0], [48700.0, 6.0], [47900.0, 2.0], [49500.0, 2.0], [50300.0, 1.0], [51900.0, 1.0], [52700.0, 1.0], [55100.0, 5.0], [55900.0, 1.0], [59100.0, 2.0], [57500.0, 1.0], [62300.0, 1.0], [63100.0, 1.0], [65500.0, 1.0], [68600.0, 4.0], [67000.0, 1.0], [70200.0, 8.0], [76600.0, 1.0], [75000.0, 1.0], [81400.0, 1.0], [83000.0, 2.0], [347800.0, 6.0], [99000.0, 1.0], [158800.0, 7.0], [169300.0, 1.0], [172500.0, 1.0], [69300.0, 1.0], [67700.0, 1.0], [70900.0, 3.0], [72500.0, 1.0], [74100.0, 1.0], [75700.0, 1.0], [80500.0, 1.0], [85300.0, 1.0], [82100.0, 1.0], [106100.0, 1.0], [109300.0, 1.0], [135000.0, 1.0], [16700.0, 2.0], [17100.0, 3.0], [18300.0, 15.0], [17900.0, 1.0], [19100.0, 5.0], [19500.0, 2.0], [19900.0, 1.0], [20300.0, 1.0], [20700.0, 7.0], [21100.0, 469.0], [21500.0, 227.0], [21900.0, 6.0], [22300.0, 4.0], [22700.0, 2.0], [23100.0, 31.0], [23500.0, 1.0], [23900.0, 3.0], [25100.0, 1.0], [24700.0, 1.0], [25900.0, 8.0], [26300.0, 1.0], [27500.0, 1.0], [26700.0, 3.0], [27100.0, 4.0], [27900.0, 1.0], [29100.0, 2.0], [30700.0, 2.0], [30300.0, 1.0], [31100.0, 1.0], [32300.0, 1.0], [31900.0, 2.0], [32700.0, 2.0], [33400.0, 6.0], [34200.0, 1.0], [36600.0, 6.0], [38200.0, 4.0], [37400.0, 4.0], [40600.0, 6.0], [39000.0, 2.0], [39800.0, 1.0], [42200.0, 2.0], [41400.0, 1.0], [43000.0, 4.0], [164700.0, 3.0], [171100.0, 2.0], [43800.0, 2.0], [44600.0, 2.0], [46200.0, 5.0], [47000.0, 1.0], [45400.0, 2.0], [48600.0, 4.0], [47800.0, 8.0], [50200.0, 3.0], [49400.0, 3.0], [51000.0, 1.0], [52600.0, 1.0], [54200.0, 7.0], [55000.0, 1.0], [55800.0, 2.0], [57400.0, 3.0], [59000.0, 1.0], [58200.0, 5.0], [238300.0, 1.0], [62200.0, 1.0], [247900.0, 1.0], [64600.0, 1.0], [66800.0, 5.0], [68400.0, 1.0], [70000.0, 3.0], [71600.0, 1.0], [73200.0, 1.0], [82800.0, 2.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 350600.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 45.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1\u00A0500ms"], [2, "Requests having \nresponse time > 1\u00A0500ms"], [3, "Requests in error"]], "maxY": 8341.0, "series": [{"data": [[0.0, 53.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 45.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1\u00A0500ms", "isController": false}, {"data": [[2.0, 1361.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1\u00A0500ms", "isController": false}, {"data": [[3.0, 8341.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 32.0, "minX": 1.5762387E12, "maxY": 2000.0, "series": [{"data": [[1.57623876E12, 1999.9958775029447], [1.57623894E12, 136.6956521739129], [1.57623888E12, 289.3901734104047], [1.57623906E12, 32.0], [1.576239E12, 72.88888888888887], [1.5762387E12, 2000.0], [1.57623882E12, 1306.6407068062865]], "isOverall": false, "label": "Children", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.57623906E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 193.0, "minX": 1.0, "maxY": 350637.0, "series": [{"data": [[2.0, 288493.0], [3.0, 348014.0], [4.0, 347993.0], [5.0, 350430.0], [6.0, 347987.0], [7.0, 347984.0], [8.0, 350637.0], [9.0, 347861.0], [10.0, 227350.0], [11.0, 348018.0], [12.0, 238323.0], [13.0, 347847.0], [14.0, 350508.0], [15.0, 348002.0], [16.0, 305791.0], [17.0, 350397.0], [18.0, 347991.0], [19.0, 224987.0], [20.0, 267007.0], [21.0, 347999.0], [22.0, 265342.0], [23.0, 350522.0], [24.0, 350482.0], [25.0, 293650.0], [26.0, 279808.0], [27.0, 347842.0], [28.0, 350625.0], [29.0, 268002.0], [30.0, 350441.0], [31.0, 347961.0], [33.0, 347981.0], [32.0, 350476.0], [35.0, 350477.0], [34.0, 347839.0], [37.0, 350479.0], [36.0, 247987.0], [39.0, 245984.0], [38.0, 266781.0], [41.0, 347941.0], [40.0, 347978.0], [43.0, 350592.0], [42.0, 266972.0], [45.0, 347930.0], [44.0, 350598.0], [47.0, 266665.0], [46.0, 347938.0], [49.0, 347925.0], [48.0, 247702.0], [51.0, 238515.0], [50.0, 347945.0], [53.0, 263972.0], [52.0, 350343.0], [55.0, 347901.0], [54.0, 347759.0], [57.0, 347723.0], [56.0, 350405.0], [59.0, 347858.0], [58.0, 350335.0], [61.0, 265225.0], [60.0, 350361.0], [63.0, 350330.0], [62.0, 347824.0], [67.0, 61159.50000000001], [66.0, 167261.66666666666], [65.0, 316.0], [64.0, 430.0], [71.0, 113991.0], [70.0, 379.0], [69.0, 96916.8], [68.0, 214.0], [75.0, 307.0], [74.0, 204125.5], [73.0, 60129.75], [72.0, 369.0], [79.0, 401.0], [78.0, 283.0], [77.0, 172693.66666666666], [83.0, 212.0], [82.0, 173962.0], [81.0, 172752.0], [80.0, 101724.85714285716], [87.0, 640.0], [86.0, 1172.5], [85.0, 694.0], [84.0, 234.0], [91.0, 1314.0], [90.0, 366.5], [89.0, 339.0], [88.0, 678.0], [95.0, 1337.0], [94.0, 1443.0], [93.0, 1650.5], [92.0, 124190.75], [98.0, 171293.0], [97.0, 171312.0], [103.0, 1748.0], [102.0, 2513.0], [101.0, 171281.25], [100.0, 171276.0], [107.0, 55607.66666666667], [106.0, 3543.0], [105.0, 3435.8], [104.0, 86927.0], [111.0, 144897.6923076923], [110.0, 1872.3333333333333], [109.0, 2033.6666666666667], [108.0, 86740.5], [115.0, 542.0], [114.0, 560.0], [113.0, 170898.0], [112.0, 171591.25], [119.0, 129673.25], [118.0, 464.0], [117.0, 488.0], [116.0, 530.0], [123.0, 193.0], [122.0, 20999.0], [121.0, 7204.0], [120.0, 172754.75], [127.0, 79340.5], [126.0, 10685.0], [125.0, 10631.75], [124.0, 10716.5], [135.0, 1040.3333333333333], [133.0, 894.0], [132.0, 905.0], [131.0, 920.0], [130.0, 198.0], [129.0, 770.0], [128.0, 532.0], [143.0, 2131.0], [142.0, 4433.8], [141.0, 2788.5], [140.0, 2905.0], [139.0, 11506.0], [138.0, 11681.0], [137.0, 7074.5], [136.0, 6367.0], [150.0, 7968.0], [149.0, 64170.0], [148.0, 7367.846153846153], [147.0, 1951.0], [146.0, 4269.0], [145.0, 2065.0], [144.0, 915.0], [159.0, 3693.0], [158.0, 4121.0], [157.0, 6542.0], [156.0, 6779.0], [155.0, 7343.5], [154.0, 7938.0], [153.0, 7565.0], [152.0, 7701.5], [167.0, 98947.76923076923], [166.0, 522.0], [165.0, 136724.85714285713], [164.0, 1540.0], [161.0, 1639.5], [160.0, 2684.0], [175.0, 21010.0], [174.0, 128277.0], [173.0, 53826.0], [172.0, 20997.0], [171.0, 110996.5625], [170.0, 120104.50000000001], [169.0, 139678.75], [168.0, 43941.0], [183.0, 21012.0], [182.0, 9296.0], [181.0, 45542.0], [180.0, 21021.0], [179.0, 21023.0], [178.0, 21029.0], [177.0, 21005.0], [176.0, 21013.0], [191.0, 21001.5], [189.0, 21027.5], [188.0, 50706.25], [187.0, 9470.0], [186.0, 21008.0], [185.0, 31982.2], [184.0, 9366.0], [199.0, 8907.666666666666], [198.0, 1326.0], [197.0, 690.0], [196.0, 679.0], [195.0, 193.0], [194.0, 527.0], [193.0, 440.0], [192.0, 21018.0], [207.0, 1112.0], [206.0, 18661.0], [205.0, 17175.0], [203.0, 17678.666666666668], [202.0, 1443.0], [201.0, 11846.5], [200.0, 2005.0], [215.0, 1698.0], [214.0, 1970.0], [213.0, 1964.0], [212.0, 21929.0], [211.0, 21784.0], [210.0, 22292.0], [209.0, 1879.0], [208.0, 22357.0], [223.0, 8425.0], [222.0, 14749.0], [221.0, 31904.0], [220.0, 33141.0], [219.0, 34070.5], [218.0, 37294.0], [217.0, 16279.75], [216.0, 7046.0], [231.0, 20715.0], [230.0, 21343.0], [229.0, 20865.0], [228.0, 23922.0], [227.0, 21015.0], [226.0, 16230.0], [225.0, 7744.0], [224.0, 13760.0], [239.0, 23851.0], [238.0, 26302.0], [237.0, 22595.0], [236.0, 30462.0], [235.0, 36420.0], [234.0, 21287.5], [233.0, 22957.0], [247.0, 68591.0], [246.0, 22190.666666666668], [245.0, 21432.0], [244.0, 19814.0], [243.0, 19807.0], [242.0, 19924.0], [241.0, 47168.0], [240.0, 29630.0], [255.0, 21023.0], [254.0, 21024.0], [253.0, 21006.5], [252.0, 21014.0], [251.0, 18338.0], [250.0, 21011.0], [249.0, 68367.0], [248.0, 44610.5], [270.0, 21011.0], [271.0, 21021.5], [269.0, 21010.5], [268.0, 21008.0], [267.0, 21006.0], [266.0, 21014.5], [265.0, 21004.0], [264.0, 10773.0], [263.0, 19346.0], [257.0, 32205.333333333336], [256.0, 65048.0], [259.0, 21023.0], [258.0, 21422.0], [262.0, 21258.0], [261.0, 22780.0], [260.0, 19054.0], [285.0, 21001.0], [284.0, 21011.0], [275.0, 38661.5], [274.0, 21012.0], [273.0, 21013.0], [283.0, 12538.0], [282.0, 17073.0], [281.0, 21022.0], [280.0, 21008.0], [278.0, 10013.0], [277.0, 15294.0], [276.0, 21277.0], [302.0, 21012.333333333332], [303.0, 21015.0], [300.0, 62716.0], [291.0, 21008.0], [290.0, 35872.0], [289.0, 21017.0], [288.0, 21017.0], [299.0, 67347.0], [298.0, 21017.0], [297.0, 21019.0], [296.0, 21007.0], [295.0, 21016.0], [294.0, 21007.0], [293.0, 21007.0], [292.0, 21018.0], [307.0, 69556.0], [319.0, 21021.0], [316.0, 21001.0], [314.0, 21011.0], [311.0, 20999.0], [310.0, 76712.0], [309.0, 43840.0], [308.0, 70879.0], [306.0, 70907.0], [305.0, 21010.0], [304.0, 21009.0], [334.0, 21013.0], [335.0, 21017.0], [333.0, 45095.5], [332.0, 44958.6], [331.0, 61552.00000000001], [330.0, 68955.5], [328.0, 57787.25], [327.0, 63581.83333333333], [321.0, 69642.0], [320.0, 21021.0], [323.0, 67619.16666666667], [322.0, 69176.33333333333], [326.0, 33564.0], [325.0, 21011.0], [324.0, 48099.0], [350.0, 21014.0], [351.0, 20999.0], [349.0, 43055.0], [348.0, 20999.0], [347.0, 21014.0], [346.0, 21014.0], [345.0, 27942.8], [344.0, 55681.0], [343.0, 21000.0], [337.0, 45024.25], [336.0, 21027.5], [339.0, 35247.5], [338.0, 21018.5], [342.0, 55808.0], [341.0, 48167.333333333336], [366.0, 21000.0], [367.0, 21029.0], [364.0, 21029.0], [355.0, 21019.5], [353.0, 21010.0], [352.0, 21019.0], [363.0, 20999.0], [362.0, 41655.5], [361.0, 38176.333333333336], [360.0, 35683.333333333336], [358.0, 33927.75], [357.0, 21015.666666666668], [356.0, 20999.0], [380.0, 21005.666666666668], [382.0, 61031.0], [383.0, 70514.0], [381.0, 61470.333333333336], [377.0, 21009.0], [376.0, 21017.333333333332], [374.0, 21019.0], [373.0, 21025.666666666668], [371.0, 21019.0], [369.0, 21009.0], [368.0, 21019.0], [398.0, 21011.0], [399.0, 40709.0], [397.0, 21012.0], [396.0, 21002.0], [395.0, 21011.0], [394.0, 20999.0], [392.0, 60321.0], [391.0, 30842.25], [384.0, 21010.0], [387.0, 21028.0], [385.0, 21008.5], [390.0, 66633.0], [389.0, 60370.0], [388.0, 60378.0], [414.0, 37328.0], [415.0, 46390.0], [413.0, 21012.0], [412.0, 38440.5], [411.0, 38113.0], [410.0, 43911.0], [409.0, 21023.0], [408.0, 21023.0], [407.0, 37889.0], [401.0, 21022.0], [400.0, 21022.0], [403.0, 48480.0], [402.0, 40822.0], [406.0, 41808.5], [405.0, 38037.0], [404.0, 61998.83333333333], [430.0, 21020.0], [431.0, 21020.0], [428.0, 21016.0], [419.0, 33739.5], [418.0, 21002.5], [416.0, 21023.0], [427.0, 21020.0], [426.0, 36947.0], [425.0, 37177.0], [424.0, 61545.0], [423.0, 58256.0], [421.0, 62034.0], [420.0, 58264.0], [446.0, 21002.0], [447.0, 21017.5], [445.0, 20995.0], [444.0, 20999.0], [443.0, 21006.0], [441.0, 21012.0], [440.0, 20999.0], [436.0, 20994.0], [432.0, 21000.0], [435.0, 57678.0], [434.0, 21009.5], [451.0, 21001.0], [461.0, 21031.0], [463.0, 21014.333333333332], [460.0, 21021.0], [458.0, 21021.0], [457.0, 21012.0], [455.0, 21032.0], [453.0, 21021.0], [452.0, 21021.0], [450.0, 21011.0], [449.0, 21021.0], [448.0, 21011.0], [477.0, 20994.0], [478.0, 21021.25], [476.0, 21006.0], [467.0, 21000.0], [466.0, 21009.5], [465.0, 21004.0], [464.0, 21007.0], [475.0, 21013.0], [474.0, 21017.0], [473.0, 21007.0], [472.0, 21010.0], [470.0, 21017.0], [469.0, 20996.0], [494.0, 21000.0], [495.0, 21030.0], [493.0, 21010.0], [492.0, 21018.0], [491.0, 21008.0], [489.0, 21010.0], [488.0, 21019.5], [487.0, 21007.25], [480.0, 21012.5], [483.0, 21010.0], [482.0, 21009.6], [485.0, 21019.333333333332], [484.0, 21004.666666666668], [510.0, 21019.0], [511.0, 38431.0], [509.0, 20997.5], [508.0, 21020.0], [507.0, 28131.25], [506.0, 21008.0], [505.0, 23779.5], [504.0, 21030.0], [503.0, 21017.0], [497.0, 21007.333333333332], [499.0, 21011.0], [498.0, 21021.0], [502.0, 21025.0], [501.0, 21007.0], [500.0, 21007.0], [540.0, 21022.0], [543.0, 21024.0], [530.0, 21008.0], [529.0, 21012.5], [532.0, 20997.0], [531.0, 21013.5], [542.0, 21011.75], [541.0, 21022.0], [539.0, 24205.0], [538.0, 21025.0], [537.0, 21012.0], [536.0, 21018.5], [525.0, 20998.0], [514.0, 20998.0], [516.0, 21009.0], [515.0, 21013.5], [518.0, 21009.25], [517.0, 20998.0], [524.0, 21006.166666666664], [523.0, 21008.0], [522.0, 21004.0], [521.0, 21018.666666666668], [535.0, 21010.666666666668], [533.0, 21007.0], [570.0, 21011.0], [574.0, 21002.0], [575.0, 21002.0], [561.0, 21028.0], [560.0, 21017.2], [563.0, 21013.333333333332], [562.0, 21001.0], [565.0, 21001.0], [564.0, 21000.666666666668], [573.0, 21009.5], [572.0, 21010.0], [571.0, 21001.0], [568.0, 21001.0], [551.0, 21000.0], [550.0, 20999.0], [549.0, 53942.333333333336], [548.0, 36300.0], [547.0, 21008.8], [546.0, 21010.333333333332], [544.0, 21016.0], [559.0, 21007.5], [557.0, 21009.0], [556.0, 21009.5], [555.0, 21013.0], [554.0, 30765.5], [553.0, 20994.0], [552.0, 38236.5], [567.0, 21011.0], [566.0, 21022.0], [601.0, 21007.75], [605.0, 21010.0], [600.0, 21010.0], [583.0, 21007.5], [581.0, 21012.0], [580.0, 21016.25], [578.0, 21004.333333333332], [577.0, 21003.0], [576.0, 21014.333333333332], [596.0, 20997.75], [595.0, 21016.0], [594.0, 21017.0], [590.0, 21001.5], [589.0, 21007.0], [587.0, 21000.0], [584.0, 21010.0], [633.0, 21013.0], [638.0, 21004.8], [639.0, 21004.0], [625.0, 21041.333333333332], [624.0, 21039.25], [627.0, 21012.0], [626.0, 21006.666666666664], [629.0, 21008.25], [628.0, 21008.0], [636.0, 21018.0], [635.0, 21008.0], [634.0, 21008.0], [632.0, 21000.0], [615.0, 21012.5], [614.0, 21018.5], [613.0, 21975.333333333332], [612.0, 21019.0], [611.0, 21014.0], [610.0, 21013.0], [609.0, 21008.0], [608.0, 21011.25], [621.0, 21025.0], [620.0, 21011.5], [619.0, 21010.2], [618.0, 21009.0], [631.0, 21006.666666666668], [630.0, 21000.0], [654.0, 21007.0], [657.0, 21063.0], [656.0, 29520.333333333332], [655.0, 21001.5], [643.0, 21015.666666666668], [640.0, 20999.0], [646.0, 21009.0], [645.0, 21018.0], [653.0, 21007.5], [651.0, 21019.5], [650.0, 21008.166666666668], [649.0, 21001.0], [648.0, 21008.0], [810.0, 21019.666666666668], [809.0, 21017.5], [805.0, 21027.25], [801.0, 21195.906040268444], [851.0, 21008.5], [854.0, 21005.0], [853.0, 21001.5], [852.0, 21009.0], [850.0, 21009.0], [849.0, 21009.5], [848.0, 21015.0], [839.0, 21012.0], [838.0, 21028.0], [847.0, 21012.176470588234], [843.0, 21019.0], [842.0, 21018.0], [841.0, 21019.833333333332], [840.0, 21023.333333333332], [883.0, 21019.0], [888.0, 21007.333333333332], [870.0, 20999.53846153846], [869.0, 21002.0], [887.0, 21007.0], [885.0, 21010.0], [884.0, 21012.0], [882.0, 21018.0], [880.0, 21016.0], [879.0, 21016.0], [877.0, 21019.0], [876.0, 25875.5], [875.0, 21020.0], [873.0, 21014.333333333332], [872.0, 20997.5], [915.0, 21010.333333333332], [925.0, 21027.0], [923.0, 20997.0], [922.0, 20998.0], [921.0, 20996.5], [911.0, 21013.0], [898.0, 21014.666666666664], [903.0, 20997.0], [902.0, 21014.285714285714], [910.0, 21012.0], [909.0, 21016.0], [905.0, 21003.333333333332], [904.0, 20995.0], [919.0, 20995.0], [918.0, 20998.0], [917.0, 21010.0], [914.0, 21012.5], [912.0, 21015.0], [948.0, 19289.333333333332], [955.0, 32642.5], [956.0, 21000.0], [945.0, 21031.0], [944.0, 21001.0], [947.0, 22952.0], [946.0, 13968.0], [954.0, 21011.0], [953.0, 22086.0], [952.0, 21239.0], [935.0, 20995.333333333332], [929.0, 21000.25], [943.0, 31364.625], [941.0, 20395.4], [939.0, 21011.25], [938.0, 20723.428571428572], [937.0, 21008.5], [936.0, 21003.5], [951.0, 32348.333333333332], [950.0, 20609.333333333332], [949.0, 35419.5], [989.0, 21019.666666666668], [988.0, 21015.0], [987.0, 21019.0], [986.0, 21020.89473684211], [985.0, 21018.0], [963.0, 21021.75], [962.0, 21022.0], [993.0, 20996.75], [1086.0, 21021.0], [1060.0, 21006.82352941177], [1062.0, 21006.0], [1064.0, 21019.0], [1084.0, 21021.0], [1082.0, 21018.0], [1080.0, 21025.0], [1030.0, 21010.0], [1028.0, 21007.0], [1026.0, 21007.0], [1024.0, 21002.0], [1092.0, 21009.5], [1096.0, 21008.5], [1144.0, 36924.0], [1108.0, 21001.0], [1106.0, 21017.0], [1100.0, 21015.25], [1094.0, 20997.666666666668], [1090.0, 21016.0], [1088.0, 21000.0], [1206.0, 21024.000000000004], [1208.0, 21014.0], [1204.0, 21015.0], [1202.0, 21017.606060606064], [1200.0, 26311.333333333332], [1276.0, 21006.411764705885], [1278.0, 21006.75], [1248.0, 37639.0], [1250.0, 26965.36], [1252.0, 26716.466666666667], [1254.0, 21010.0], [1256.0, 21003.5], [1258.0, 31329.0], [1262.0, 46665.9375], [1274.0, 21010.5], [1272.0, 21008.0], [1270.0, 21005.0], [1268.0, 21007.0], [1264.0, 21028.0], [1230.0, 21734.25], [1228.0, 21022.0], [1226.0, 21001.0], [1224.0, 21005.5], [1222.0, 21007.5], [1220.0, 21004.666666666668], [1246.0, 20993.25], [1242.0, 21002.0], [1234.0, 31996.5], [1232.0, 21010.0], [1282.0, 21020.666666666668], [1300.0, 21012.333333333332], [1302.0, 21108.0], [1298.0, 37350.09375], [1296.0, 54155.28571428572], [1294.0, 35319.62499999999], [1292.0, 28080.399999999998], [1284.0, 21008.0], [1280.0, 21020.0], [1402.0, 21076.5], [1390.0, 21110.0], [1406.0, 21089.0], [1404.0, 21080.0], [1400.0, 21015.0], [1398.0, 21070.5], [1396.0, 21073.666666666668], [1392.0, 21057.0], [1420.0, 21055.333333333332], [1464.0, 34481.8], [1468.0, 21006.0], [1440.0, 21026.0], [1442.0, 21030.0], [1444.0, 21023.25], [1446.0, 21024.6], [1462.0, 21009.0], [1460.0, 21009.0], [1416.0, 21082.0], [1414.0, 21085.333333333332], [1418.0, 21086.0], [1422.0, 21058.0], [1438.0, 21025.75], [1436.0, 21021.6], [1434.0, 21029.5], [1432.0, 21038.0], [1430.0, 21043.03308823529], [1428.0, 21042.5], [1426.0, 21070.0], [1424.0, 21033.0], [1454.0, 21014.75], [1452.0, 21020.899999999998], [1534.0, 21011.583333333332], [1480.0, 21083.0], [1518.0, 21005.8], [1512.0, 20999.0], [1510.0, 21015.000000000004], [1500.0, 21005.0], [1496.0, 21008.0], [1494.0, 21029.399999999998], [1540.0, 21004.6], [1596.0, 27836.0], [1548.0, 21001.0], [1544.0, 21013.333333333332], [1558.0, 25634.0], [1556.0, 20996.75], [1554.0, 20997.5], [1552.0, 21000.0], [1640.0, 21006.0], [1672.0, 21018.0], [1788.0, 21005.0], [1790.0, 21007.0], [1786.0, 21009.281249999993], [1782.0, 21018.428571428576], [1820.0, 20996.0], [1854.0, 21001.5], [1852.0, 20999.0], [1850.0, 21998.500000000004], [1826.0, 21010.0], [1818.0, 20994.0], [1816.0, 20997.0], [1812.0, 20998.666666666668], [1810.0, 21001.333333333332], [1918.0, 21004.333333333332], [1868.0, 25961.25], [1866.0, 21007.0], [1978.0, 21007.0], [1928.0, 25920.75], [1926.0, 21010.0], [1920.0, 21013.0], [1992.0, 21004.4], [1996.0, 21016.5], [2000.0, 24233.704432682774], [1986.0, 21055.96296296296], [1998.0, 22372.657608695652], [1994.0, 21024.0], [1990.0, 21343.772727272724], [1988.0, 21008.4], [1087.0, 21018.0], [1083.0, 21006.5], [1059.0, 20995.0], [1061.0, 21006.1875], [1063.0, 21008.0], [1079.0, 21012.0], [1077.0, 21009.0], [1031.0, 21005.5], [1027.0, 21009.0], [1067.0, 21003.75], [1065.0, 21009.199999999997], [1109.0, 29589.666666666668], [1105.0, 21017.0], [1101.0, 37814.0], [1095.0, 21015.5], [1093.0, 21017.0], [1089.0, 21001.0], [1209.0, 21012.75], [1199.0, 21033.75], [1207.0, 21021.5], [1205.0, 21025.0], [1203.0, 21027.0], [1201.0, 21466.486486486483], [1271.0, 31205.2], [1253.0, 53323.799999999996], [1275.0, 21010.0], [1249.0, 25748.285714285714], [1251.0, 21007.0], [1255.0, 31384.0], [1257.0, 31328.0], [1261.0, 39580.5], [1277.0, 20997.5], [1273.0, 21017.0], [1267.0, 21008.0], [1265.0, 21022.0], [1231.0, 28499.470588235294], [1227.0, 32505.625], [1225.0, 21004.0], [1223.0, 20997.0], [1221.0, 21005.666666666668], [1247.0, 29993.4], [1241.0, 21005.0], [1239.0, 21005.0], [1237.0, 21005.0], [1235.0, 34173.11111111111], [1233.0, 21185.5], [1287.0, 21002.0], [1343.0, 21016.53846153846], [1301.0, 21009.94230769231], [1299.0, 50907.875], [1297.0, 21002.0], [1295.0, 35157.5], [1293.0, 21005.0], [1291.0, 30877.875], [1289.0, 47149.33333333333], [1285.0, 20995.0], [1283.0, 27845.0], [1403.0, 21100.0], [1407.0, 21087.0], [1401.0, 21077.0], [1399.0, 21055.0], [1397.0, 21062.666666666668], [1395.0, 21076.0], [1393.0, 21085.0], [1463.0, 21013.0], [1441.0, 21034.0], [1443.0, 21027.0], [1445.0, 21019.75], [1461.0, 21011.333333333332], [1439.0, 21031.0], [1409.0, 21088.0], [1413.0, 21087.5], [1411.0, 21076.0], [1419.0, 21065.0], [1421.0, 21091.0], [1423.0, 21044.5], [1437.0, 21024.0], [1435.0, 21019.0], [1433.0, 21041.0], [1431.0, 21030.0], [1429.0, 21056.0], [1425.0, 21048.5], [1453.0, 21017.5], [1451.0, 21023.899999999998], [1521.0, 21001.333333333332], [1513.0, 21010.0], [1511.0, 21007.0], [1501.0, 21004.75], [1497.0, 21006.0], [1495.0, 20999.0], [1559.0, 31461.641025641027], [1595.0, 20986.310077519385], [1591.0, 21014.69587628865], [1541.0, 21001.333333333332], [1557.0, 28213.333333333332], [1555.0, 20994.5], [1713.0, 73170.0], [1791.0, 21010.0], [1789.0, 20999.0], [1787.0, 21010.0], [1767.0, 22260.020134228173], [1783.0, 21013.0], [1819.0, 20997.4], [1853.0, 20993.0], [1851.0, 21000.0], [1793.0, 20998.666666666668], [1829.0, 106049.0], [1825.0, 24346.166666666668], [1817.0, 20995.333333333332], [1815.0, 21001.0], [1813.0, 20998.0], [1811.0, 21002.5], [1917.0, 21003.0], [1911.0, 21012.41176470588], [1919.0, 21018.0], [1909.0, 21002.2], [1907.0, 21004.25], [1901.0, 21015.125], [1867.0, 21003.8], [1979.0, 19308.0], [1927.0, 21009.666666666668], [1921.0, 27583.0], [1987.0, 21008.0], [1999.0, 18518.85714285714], [1997.0, 30000.074074074066], [1991.0, 21001.6], [1989.0, 21011.625], [1.0, 350504.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[1658.1568367346958, 27370.66561224489]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 2000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 0.0, "minX": 1.5762387E12, "maxY": 569449.1833333333, "series": [{"data": [[1.57623876E12, 569449.1833333333], [1.57623894E12, 78964.78333333334], [1.57623888E12, 97837.05], [1.57623906E12, 2749.6], [1.576239E12, 15159.233333333334], [1.5762387E12, 132687.41666666666], [1.57623882E12, 297000.23333333334]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.57623876E12, 1915.4666666666667], [1.57623894E12, 398.93333333333334], [1.57623888E12, 522.1333333333333], [1.57623906E12, 0.0], [1.576239E12, 76.26666666666667], [1.5762387E12, 542.6666666666666], [1.57623882E12, 885.8666666666667]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.57623906E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 21681.992753623206, "minX": 1.5762387E12, "maxY": 322627.6031746033, "series": [{"data": [[1.57623876E12, 24705.330388692582], [1.57623894E12, 65222.517391304296], [1.57623888E12, 31453.849710982642], [1.57623906E12, 322627.6031746033], [1.576239E12, 84503.8], [1.5762387E12, 21681.992753623206], [1.57623882E12, 23372.494764397943]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.57623906E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 174.9111111111111, "minX": 1.5762387E12, "maxY": 24891.190476190477, "series": [{"data": [[1.57623876E12, 5177.94680015702], [1.57623894E12, 2591.991304347826], [1.57623888E12, 14212.627167630051], [1.57623906E12, 24891.190476190477], [1.576239E12, 174.9111111111111], [1.5762387E12, 4090.839544513456], [1.57623882E12, 3436.4721858638773]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.57623906E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 14413.063492063491, "minX": 1.5762387E12, "maxY": 84340.13333333332, "series": [{"data": [[1.57623876E12, 20469.514723203753], [1.57623894E12, 62960.773913043486], [1.57623888E12, 16627.505780346826], [1.57623906E12, 14413.063492063491], [1.576239E12, 84340.13333333332], [1.5762387E12, 19015.189440993774], [1.57623882E12, 20239.5654450262]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.57623906E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 189.0, "minX": 1.5762387E12, "maxY": 155920.0, "series": [{"data": [[1.57623876E12, 92776.0], [1.57623894E12, 143038.0], [1.57623888E12, 137894.0], [1.576239E12, 586.0], [1.5762387E12, 35931.0], [1.57623882E12, 155920.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.57623876E12, 7346.0], [1.57623894E12, 189.0], [1.57623888E12, 193.0], [1.576239E12, 189.0], [1.5762387E12, 13809.0], [1.57623882E12, 13743.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.57623876E12, 70459.0], [1.57623894E12, 7723.8], [1.57623888E12, 72019.0], [1.576239E12, 569.6], [1.5762387E12, 33358.2], [1.57623882E12, 84127.79999999997]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.57623876E12, 82828.66], [1.57623894E12, 134890.9699999999], [1.57623888E12, 131658.54999999996], [1.576239E12, 586.0], [1.5762387E12, 35509.14000000001], [1.57623882E12, 122684.39999999992]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.57623876E12, 74517.0], [1.57623894E12, 11510.95], [1.57623888E12, 76689.0], [1.576239E12, 580.75], [1.5762387E12, 34548.34999999999], [1.57623882E12, 105393.04999999986]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.576239E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 560.0, "minX": 1.0, "maxY": 347941.0, "series": [{"data": [[2.0, 9470.0], [563.0, 34603.0], [603.0, 67611.5], [580.0, 21435.0], [3.0, 2684.0], [4.0, 2107.0], [5.0, 23193.5], [6.0, 560.0], [7.0, 39225.0], [8.0, 28574.0], [9.0, 37418.0], [10.0, 1110.5], [11.0, 16009.5], [12.0, 38673.0], [13.0, 11861.5], [14.0, 68771.0], [15.0, 44062.5], [16.0, 18303.5], [17.0, 27966.0], [19.0, 37631.0], [20.0, 7595.5], [21.0, 34012.0], [22.0, 49969.0], [23.0, 2329.0], [24.0, 49143.5], [25.0, 43004.0], [26.0, 66960.0], [27.0, 27381.0], [28.0, 27755.0], [29.0, 37470.0], [30.0, 37834.5], [31.0, 13338.0], [33.0, 32973.0], [32.0, 68982.5], [35.0, 41154.5], [37.0, 44449.5], [39.0, 38610.5], [49.0, 20752.0], [57.0, 48755.0], [77.0, 61955.0], [87.0, 54163.5], [92.0, 41871.0], [93.0, 42385.0], [99.0, 22025.0], [101.0, 19743.5], [107.0, 23200.0], [108.0, 14311.0], [134.0, 19814.0], [143.0, 34527.0], [165.0, 32789.0], [174.0, 43865.5], [179.0, 63127.0], [199.0, 20796.0], [222.0, 42888.5], [233.0, 19247.5], [1.0, 11552.5], [272.0, 48254.0], [306.0, 38647.5], [356.0, 61701.0], [354.0, 42874.5], [353.0, 40976.0], [402.0, 44354.0], [483.0, 19464.0], [497.0, 43311.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[2.0, 21021.0], [563.0, 21031.5], [603.0, 21048.0], [580.0, 21009.0], [3.0, 21019.0], [4.0, 21022.5], [5.0, 21017.0], [6.0, 21010.0], [7.0, 21019.0], [8.0, 21010.0], [9.0, 21009.0], [10.0, 21013.0], [11.0, 21016.0], [12.0, 21009.5], [13.0, 21021.0], [14.0, 21007.5], [15.0, 21008.0], [16.0, 21007.0], [17.0, 21010.0], [18.0, 21009.0], [19.0, 21012.0], [20.0, 21006.0], [21.0, 21014.5], [22.0, 21008.0], [23.0, 21010.5], [25.0, 21005.0], [26.0, 21012.0], [27.0, 21009.0], [28.0, 21011.0], [29.0, 21010.0], [30.0, 21006.5], [31.0, 21011.0], [33.0, 23146.0], [32.0, 158704.0], [35.0, 20994.0], [37.0, 21007.5], [39.0, 21003.0], [49.0, 21042.0], [48.0, 21008.0], [57.0, 21007.0], [63.0, 347941.0], [77.0, 21009.0], [87.0, 21037.0], [92.0, 21008.5], [93.0, 21017.5], [99.0, 21016.0], [101.0, 21053.0], [107.0, 21064.5], [108.0, 21008.0], [134.0, 21006.0], [143.0, 21020.0], [165.0, 21011.0], [174.0, 21272.0], [179.0, 21011.0], [199.0, 21009.0], [222.0, 21058.5], [233.0, 21011.0], [1.0, 21022.0], [272.0, 23417.0], [306.0, 21007.0], [356.0, 21034.0], [354.0, 21075.5], [353.0, 21005.0], [402.0, 21598.0], [483.0, 21037.0], [497.0, 21055.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 603.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 54990.0, "series": [{"data": [[2.0, 9440.0], [563.0, 32930.0], [603.0, 54990.0], [580.0, 19350.0], [3.0, 2562.5], [4.0, 1719.0], [5.0, 20096.5], [6.0, 528.0], [7.0, 31749.0], [8.0, 20951.0], [9.0, 30335.0], [10.0, 1046.0], [11.0, 15886.5], [12.0, 31840.0], [13.0, 11703.0], [14.0, 34348.5], [15.0, 39407.5], [16.0, 17943.5], [17.0, 27099.0], [19.0, 34920.0], [20.0, 6242.0], [21.0, 26254.0], [22.0, 26924.0], [23.0, 1987.0], [24.0, 46788.5], [25.0, 37028.0], [26.0, 45656.0], [27.0, 26424.0], [28.0, 21276.0], [29.0, 33023.0], [30.0, 37190.5], [31.0, 12111.0], [33.0, 31107.0], [32.0, 30528.0], [35.0, 33342.0], [37.0, 32527.0], [39.0, 29442.0], [49.0, 18387.0], [57.0, 45338.0], [77.0, 52277.0], [87.0, 45293.5], [92.0, 36204.0], [93.0, 40609.0], [99.0, 20578.0], [101.0, 18378.0], [107.0, 18471.0], [108.0, 9026.0], [134.0, 19595.0], [143.0, 28138.0], [165.0, 29065.0], [174.0, 38410.0], [179.0, 54589.0], [199.0, 20618.0], [222.0, 39096.5], [233.0, 17007.0], [1.0, 11533.0], [272.0, 39605.0], [306.0, 33540.5], [356.0, 53287.0], [354.0, 31073.0], [353.0, 32864.0], [402.0, 38666.5], [483.0, 18521.0], [497.0, 39181.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[2.0, 0.0], [563.0, 0.0], [603.0, 0.0], [580.0, 0.0], [3.0, 0.0], [4.0, 0.0], [5.0, 0.0], [6.0, 0.0], [7.0, 0.0], [8.0, 0.0], [9.0, 0.0], [10.0, 0.0], [11.0, 0.0], [12.0, 0.0], [13.0, 0.0], [14.0, 0.0], [15.0, 0.0], [16.0, 0.0], [17.0, 0.0], [18.0, 0.0], [19.0, 0.0], [20.0, 0.0], [21.0, 0.0], [22.0, 0.0], [23.0, 0.0], [25.0, 0.0], [26.0, 0.0], [27.0, 0.0], [28.0, 0.0], [29.0, 0.0], [30.0, 0.0], [31.0, 0.0], [33.0, 0.0], [32.0, 0.0], [35.0, 0.0], [37.0, 0.0], [39.0, 0.0], [49.0, 0.0], [48.0, 0.0], [57.0, 0.0], [63.0, 0.0], [77.0, 0.0], [87.0, 0.0], [92.0, 0.0], [93.0, 0.0], [99.0, 0.0], [101.0, 0.0], [107.0, 0.0], [108.0, 0.0], [134.0, 0.0], [143.0, 0.0], [165.0, 0.0], [174.0, 0.0], [179.0, 0.0], [199.0, 0.0], [222.0, 0.0], [233.0, 0.0], [1.0, 0.0], [272.0, 0.0], [306.0, 0.0], [356.0, 0.0], [354.0, 0.0], [353.0, 0.0], [402.0, 0.0], [483.0, 0.0], [497.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 603.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.43333333333333335, "minX": 1.5762387E12, "maxY": 84.86666666666666, "series": [{"data": [[1.57623876E12, 84.86666666666666], [1.57623894E12, 2.3333333333333335], [1.57623888E12, 2.033333333333333], [1.576239E12, 0.43333333333333335], [1.5762387E12, 49.43333333333333], [1.57623882E12, 24.233333333333334]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.576239E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.5762387E12, "maxY": 74.01666666666667, "series": [{"data": [[1.57623876E12, 10.883333333333333], [1.57623894E12, 2.2666666666666666], [1.57623888E12, 2.7333333333333334], [1.576239E12, 0.43333333333333335], [1.5762387E12, 2.966666666666667], [1.57623882E12, 5.033333333333333]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.57623876E12, 74.01666666666667], [1.57623894E12, 0.13333333333333333], [1.57623888E12, 2.783333333333333], [1.5762387E12, 13.016666666666667], [1.57623882E12, 45.9]], "isOverall": false, "label": "Non HTTP response code: org.apache.http.conn.HttpHostConnectException", "isController": false}, {"data": [[1.57623888E12, 0.11666666666666667], [1.5762387E12, 0.05]], "isOverall": false, "label": "500", "isController": false}, {"data": [[1.57623888E12, 0.11666666666666667], [1.5762387E12, 0.06666666666666667]], "isOverall": false, "label": "404", "isController": false}, {"data": [[1.57623894E12, 1.35], [1.576239E12, 0.31666666666666665]], "isOverall": false, "label": "Non HTTP response code: org.apache.http.conn.ConnectTimeoutException", "isController": false}, {"data": [[1.57623894E12, 0.08333333333333333], [1.57623888E12, 0.016666666666666666], [1.57623906E12, 1.05]], "isOverall": false, "label": "Non HTTP response code: java.net.SocketException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.57623906E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.31666666666666665, "minX": 1.5762387E12, "maxY": 74.01666666666667, "series": [{"data": [[1.57623876E12, 10.883333333333333], [1.57623894E12, 2.2666666666666666], [1.57623888E12, 2.7333333333333334], [1.576239E12, 0.43333333333333335], [1.5762387E12, 2.966666666666667], [1.57623882E12, 5.033333333333333]], "isOverall": false, "label": "HTTP Request-success", "isController": false}, {"data": [[1.57623876E12, 74.01666666666667], [1.57623894E12, 1.5666666666666667], [1.57623888E12, 3.033333333333333], [1.57623906E12, 1.05], [1.576239E12, 0.31666666666666665], [1.5762387E12, 13.133333333333333], [1.57623882E12, 45.9]], "isOverall": false, "label": "HTTP Request-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.57623906E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.31666666666666665, "minX": 1.5762387E12, "maxY": 74.01666666666667, "series": [{"data": [[1.57623876E12, 10.883333333333333], [1.57623894E12, 2.2666666666666666], [1.57623888E12, 2.7333333333333334], [1.576239E12, 0.43333333333333335], [1.5762387E12, 2.966666666666667], [1.57623882E12, 5.033333333333333]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.57623876E12, 74.01666666666667], [1.57623894E12, 1.5666666666666667], [1.57623888E12, 3.033333333333333], [1.57623906E12, 1.05], [1.576239E12, 0.31666666666666665], [1.5762387E12, 13.133333333333333], [1.57623882E12, 45.9]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.57623906E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

