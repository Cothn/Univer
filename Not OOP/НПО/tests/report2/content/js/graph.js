/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 1619.0, "minX": 0.0, "maxY": 47172.0, "series": [{"data": [[0.0, 1619.0], [0.1, 2161.0], [0.2, 2457.0], [0.3, 2657.0], [0.4, 2658.0], [0.5, 2822.0], [0.6, 2847.0], [0.7, 2850.0], [0.8, 2912.0], [0.9, 2933.0], [1.0, 3013.0], [1.1, 3035.0], [1.2, 3060.0], [1.3, 3065.0], [1.4, 3091.0], [1.5, 3156.0], [1.6, 3208.0], [1.7, 3428.0], [1.8, 3552.0], [1.9, 3974.0], [2.0, 4050.0], [2.1, 4067.0], [2.2, 4071.0], [2.3, 4126.0], [2.4, 4130.0], [2.5, 4173.0], [2.6, 4237.0], [2.7, 4252.0], [2.8, 4311.0], [2.9, 4443.0], [3.0, 4545.0], [3.1, 4595.0], [3.2, 4673.0], [3.3, 4715.0], [3.4, 4800.0], [3.5, 4872.0], [3.6, 4909.0], [3.7, 5005.0], [3.8, 5117.0], [3.9, 5212.0], [4.0, 5294.0], [4.1, 5515.0], [4.2, 5659.0], [4.3, 5683.0], [4.4, 5768.0], [4.5, 5799.0], [4.6, 5898.0], [4.7, 6093.0], [4.8, 6109.0], [4.9, 6191.0], [5.0, 6327.0], [5.1, 6347.0], [5.2, 6526.0], [5.3, 6550.0], [5.4, 6584.0], [5.5, 6645.0], [5.6, 6686.0], [5.7, 6708.0], [5.8, 6764.0], [5.9, 6777.0], [6.0, 6808.0], [6.1, 6829.0], [6.2, 6850.0], [6.3, 6850.0], [6.4, 6890.0], [6.5, 6935.0], [6.6, 6949.0], [6.7, 6980.0], [6.8, 6983.0], [6.9, 6983.0], [7.0, 7100.0], [7.1, 7133.0], [7.2, 7219.0], [7.3, 7232.0], [7.4, 7294.0], [7.5, 7323.0], [7.6, 7397.0], [7.7, 7398.0], [7.8, 7425.0], [7.9, 7453.0], [8.0, 7470.0], [8.1, 7483.0], [8.2, 7535.0], [8.3, 7567.0], [8.4, 7623.0], [8.5, 7642.0], [8.6, 7645.0], [8.7, 7666.0], [8.8, 7673.0], [8.9, 7708.0], [9.0, 7761.0], [9.1, 7781.0], [9.2, 7816.0], [9.3, 7868.0], [9.4, 7879.0], [9.5, 7913.0], [9.6, 7916.0], [9.7, 7950.0], [9.8, 7953.0], [9.9, 7961.0], [10.0, 7972.0], [10.1, 7988.0], [10.2, 8000.0], [10.3, 8070.0], [10.4, 8119.0], [10.5, 8135.0], [10.6, 8193.0], [10.7, 8211.0], [10.8, 8260.0], [10.9, 8332.0], [11.0, 8342.0], [11.1, 8361.0], [11.2, 8367.0], [11.3, 8376.0], [11.4, 8380.0], [11.5, 8383.0], [11.6, 8397.0], [11.7, 8414.0], [11.8, 8418.0], [11.9, 8420.0], [12.0, 8421.0], [12.1, 8436.0], [12.2, 8439.0], [12.3, 8441.0], [12.4, 8459.0], [12.5, 8522.0], [12.6, 8542.0], [12.7, 8546.0], [12.8, 8548.0], [12.9, 8548.0], [13.0, 8550.0], [13.1, 8593.0], [13.2, 8595.0], [13.3, 8604.0], [13.4, 8606.0], [13.5, 8609.0], [13.6, 8642.0], [13.7, 8643.0], [13.8, 8659.0], [13.9, 8660.0], [14.0, 8666.0], [14.1, 8726.0], [14.2, 8737.0], [14.3, 8752.0], [14.4, 8774.0], [14.5, 8780.0], [14.6, 8797.0], [14.7, 8850.0], [14.8, 8852.0], [14.9, 8871.0], [15.0, 8878.0], [15.1, 8893.0], [15.2, 8897.0], [15.3, 8921.0], [15.4, 8934.0], [15.5, 8964.0], [15.6, 8970.0], [15.7, 8983.0], [15.8, 9020.0], [15.9, 9049.0], [16.0, 9087.0], [16.1, 9122.0], [16.2, 9132.0], [16.3, 9135.0], [16.4, 9168.0], [16.5, 9185.0], [16.6, 9201.0], [16.7, 9202.0], [16.8, 9210.0], [16.9, 9214.0], [17.0, 9256.0], [17.1, 9289.0], [17.2, 9294.0], [17.3, 9335.0], [17.4, 9339.0], [17.5, 9341.0], [17.6, 9356.0], [17.7, 9371.0], [17.8, 9379.0], [17.9, 9389.0], [18.0, 9405.0], [18.1, 9422.0], [18.2, 9426.0], [18.3, 9433.0], [18.4, 9443.0], [18.5, 9446.0], [18.6, 9462.0], [18.7, 9466.0], [18.8, 9476.0], [18.9, 9487.0], [19.0, 9547.0], [19.1, 9554.0], [19.2, 9558.0], [19.3, 9564.0], [19.4, 9565.0], [19.5, 9641.0], [19.6, 9651.0], [19.7, 9653.0], [19.8, 9663.0], [19.9, 9672.0], [20.0, 9682.0], [20.1, 9690.0], [20.2, 9692.0], [20.3, 9707.0], [20.4, 9718.0], [20.5, 9739.0], [20.6, 9742.0], [20.7, 9766.0], [20.8, 9770.0], [20.9, 9777.0], [21.0, 9779.0], [21.1, 9782.0], [21.2, 9795.0], [21.3, 9835.0], [21.4, 9866.0], [21.5, 9904.0], [21.6, 9905.0], [21.7, 9915.0], [21.8, 9928.0], [21.9, 9930.0], [22.0, 9959.0], [22.1, 9962.0], [22.2, 9975.0], [22.3, 9982.0], [22.4, 9987.0], [22.5, 9995.0], [22.6, 9997.0], [22.7, 10023.0], [22.8, 10027.0], [22.9, 10028.0], [23.0, 10091.0], [23.1, 10098.0], [23.2, 10107.0], [23.3, 10120.0], [23.4, 10124.0], [23.5, 10140.0], [23.6, 10157.0], [23.7, 10163.0], [23.8, 10165.0], [23.9, 10172.0], [24.0, 10185.0], [24.1, 10203.0], [24.2, 10207.0], [24.3, 10247.0], [24.4, 10267.0], [24.5, 10276.0], [24.6, 10298.0], [24.7, 10307.0], [24.8, 10317.0], [24.9, 10324.0], [25.0, 10334.0], [25.1, 10362.0], [25.2, 10370.0], [25.3, 10417.0], [25.4, 10428.0], [25.5, 10436.0], [25.6, 10460.0], [25.7, 10473.0], [25.8, 10491.0], [25.9, 10504.0], [26.0, 10520.0], [26.1, 10522.0], [26.2, 10533.0], [26.3, 10578.0], [26.4, 10580.0], [26.5, 10698.0], [26.6, 10739.0], [26.7, 10760.0], [26.8, 10772.0], [26.9, 10776.0], [27.0, 10795.0], [27.1, 10816.0], [27.2, 10823.0], [27.3, 10832.0], [27.4, 10835.0], [27.5, 10924.0], [27.6, 11053.0], [27.7, 11055.0], [27.8, 11144.0], [27.9, 11170.0], [28.0, 11251.0], [28.1, 11315.0], [28.2, 11340.0], [28.3, 11351.0], [28.4, 11355.0], [28.5, 11371.0], [28.6, 11381.0], [28.7, 11381.0], [28.8, 11406.0], [28.9, 11428.0], [29.0, 11514.0], [29.1, 11576.0], [29.2, 11633.0], [29.3, 11640.0], [29.4, 11656.0], [29.5, 11662.0], [29.6, 11671.0], [29.7, 11697.0], [29.8, 11726.0], [29.9, 11772.0], [30.0, 11860.0], [30.1, 11879.0], [30.2, 11901.0], [30.3, 11904.0], [30.4, 11919.0], [30.5, 11924.0], [30.6, 11942.0], [30.7, 11974.0], [30.8, 12017.0], [30.9, 12038.0], [31.0, 12079.0], [31.1, 12189.0], [31.2, 12198.0], [31.3, 12198.0], [31.4, 12219.0], [31.5, 12296.0], [31.6, 12308.0], [31.7, 12314.0], [31.8, 12372.0], [31.9, 12420.0], [32.0, 12513.0], [32.1, 12523.0], [32.2, 12524.0], [32.3, 12544.0], [32.4, 12561.0], [32.5, 12623.0], [32.6, 12648.0], [32.7, 12664.0], [32.8, 12719.0], [32.9, 12731.0], [33.0, 12770.0], [33.1, 12817.0], [33.2, 12883.0], [33.3, 12892.0], [33.4, 12901.0], [33.5, 12928.0], [33.6, 12955.0], [33.7, 12986.0], [33.8, 12986.0], [33.9, 13085.0], [34.0, 13158.0], [34.1, 13336.0], [34.2, 13367.0], [34.3, 13389.0], [34.4, 13440.0], [34.5, 13482.0], [34.6, 13483.0], [34.7, 13508.0], [34.8, 13514.0], [34.9, 13518.0], [35.0, 13545.0], [35.1, 13556.0], [35.2, 13569.0], [35.3, 13582.0], [35.4, 13590.0], [35.5, 13616.0], [35.6, 13617.0], [35.7, 13635.0], [35.8, 13649.0], [35.9, 13655.0], [36.0, 13710.0], [36.1, 13775.0], [36.2, 13803.0], [36.3, 13808.0], [36.4, 13840.0], [36.5, 13908.0], [36.6, 13922.0], [36.7, 13946.0], [36.8, 13972.0], [36.9, 13987.0], [37.0, 14054.0], [37.1, 14062.0], [37.2, 14166.0], [37.3, 14183.0], [37.4, 14225.0], [37.5, 14235.0], [37.6, 14248.0], [37.7, 14268.0], [37.8, 14270.0], [37.9, 14276.0], [38.0, 14334.0], [38.1, 14335.0], [38.2, 14354.0], [38.3, 14360.0], [38.4, 14388.0], [38.5, 14430.0], [38.6, 14433.0], [38.7, 14463.0], [38.8, 14475.0], [38.9, 14531.0], [39.0, 14533.0], [39.1, 14571.0], [39.2, 14573.0], [39.3, 14593.0], [39.4, 14602.0], [39.5, 14607.0], [39.6, 14622.0], [39.7, 14625.0], [39.8, 14649.0], [39.9, 14669.0], [40.0, 14757.0], [40.1, 14764.0], [40.2, 14772.0], [40.3, 14800.0], [40.4, 14806.0], [40.5, 14812.0], [40.6, 14825.0], [40.7, 14830.0], [40.8, 14852.0], [40.9, 14854.0], [41.0, 14863.0], [41.1, 14888.0], [41.2, 14893.0], [41.3, 14903.0], [41.4, 14909.0], [41.5, 14909.0], [41.6, 14930.0], [41.7, 14931.0], [41.8, 14939.0], [41.9, 14948.0], [42.0, 14957.0], [42.1, 14966.0], [42.2, 14975.0], [42.3, 14992.0], [42.4, 15011.0], [42.5, 15047.0], [42.6, 15064.0], [42.7, 15065.0], [42.8, 15103.0], [42.9, 15176.0], [43.0, 15187.0], [43.1, 15196.0], [43.2, 15209.0], [43.3, 15278.0], [43.4, 15283.0], [43.5, 15325.0], [43.6, 15363.0], [43.7, 15364.0], [43.8, 15378.0], [43.9, 15435.0], [44.0, 15442.0], [44.1, 15451.0], [44.2, 15481.0], [44.3, 15507.0], [44.4, 15508.0], [44.5, 15511.0], [44.6, 15541.0], [44.7, 15559.0], [44.8, 15569.0], [44.9, 15612.0], [45.0, 15615.0], [45.1, 15628.0], [45.2, 15629.0], [45.3, 15636.0], [45.4, 15641.0], [45.5, 15644.0], [45.6, 15683.0], [45.7, 15701.0], [45.8, 15713.0], [45.9, 15716.0], [46.0, 15737.0], [46.1, 15756.0], [46.2, 15759.0], [46.3, 15763.0], [46.4, 15805.0], [46.5, 15863.0], [46.6, 15898.0], [46.7, 15902.0], [46.8, 15912.0], [46.9, 15922.0], [47.0, 15926.0], [47.1, 15993.0], [47.2, 16001.0], [47.3, 16015.0], [47.4, 16030.0], [47.5, 16038.0], [47.6, 16105.0], [47.7, 16106.0], [47.8, 16111.0], [47.9, 16139.0], [48.0, 16139.0], [48.1, 16148.0], [48.2, 16155.0], [48.3, 16156.0], [48.4, 16229.0], [48.5, 16252.0], [48.6, 16267.0], [48.7, 16295.0], [48.8, 16308.0], [48.9, 16316.0], [49.0, 16344.0], [49.1, 16362.0], [49.2, 16370.0], [49.3, 16376.0], [49.4, 16416.0], [49.5, 16435.0], [49.6, 16449.0], [49.7, 16463.0], [49.8, 16466.0], [49.9, 16482.0], [50.0, 16503.0], [50.1, 16519.0], [50.2, 16545.0], [50.3, 16554.0], [50.4, 16556.0], [50.5, 16560.0], [50.6, 16565.0], [50.7, 16575.0], [50.8, 16579.0], [50.9, 16604.0], [51.0, 16616.0], [51.1, 16649.0], [51.2, 16650.0], [51.3, 16658.0], [51.4, 16663.0], [51.5, 16675.0], [51.6, 16687.0], [51.7, 16706.0], [51.8, 16708.0], [51.9, 16721.0], [52.0, 16731.0], [52.1, 16740.0], [52.2, 16747.0], [52.3, 16748.0], [52.4, 16748.0], [52.5, 16761.0], [52.6, 16773.0], [52.7, 16780.0], [52.8, 16793.0], [52.9, 16794.0], [53.0, 16802.0], [53.1, 16818.0], [53.2, 16832.0], [53.3, 16846.0], [53.4, 16849.0], [53.5, 16862.0], [53.6, 16875.0], [53.7, 16894.0], [53.8, 16895.0], [53.9, 16908.0], [54.0, 16922.0], [54.1, 16945.0], [54.2, 16955.0], [54.3, 16987.0], [54.4, 16994.0], [54.5, 17008.0], [54.6, 17041.0], [54.7, 17044.0], [54.8, 17066.0], [54.9, 17109.0], [55.0, 17146.0], [55.1, 17152.0], [55.2, 17175.0], [55.3, 17183.0], [55.4, 17246.0], [55.5, 17290.0], [55.6, 17314.0], [55.7, 17324.0], [55.8, 17328.0], [55.9, 17355.0], [56.0, 17359.0], [56.1, 17382.0], [56.2, 17384.0], [56.3, 17387.0], [56.4, 17393.0], [56.5, 17421.0], [56.6, 17449.0], [56.7, 17497.0], [56.8, 17509.0], [56.9, 17516.0], [57.0, 17549.0], [57.1, 17572.0], [57.2, 17593.0], [57.3, 17649.0], [57.4, 17650.0], [57.5, 17651.0], [57.6, 17669.0], [57.7, 17715.0], [57.8, 17766.0], [57.9, 17766.0], [58.0, 17787.0], [58.1, 17889.0], [58.2, 17901.0], [58.3, 17906.0], [58.4, 17990.0], [58.5, 18003.0], [58.6, 18011.0], [58.7, 18017.0], [58.8, 18019.0], [58.9, 18032.0], [59.0, 18034.0], [59.1, 18086.0], [59.2, 18089.0], [59.3, 18089.0], [59.4, 18101.0], [59.5, 18103.0], [59.6, 18170.0], [59.7, 18188.0], [59.8, 18231.0], [59.9, 18256.0], [60.0, 18288.0], [60.1, 18306.0], [60.2, 18316.0], [60.3, 18320.0], [60.4, 18341.0], [60.5, 18370.0], [60.6, 18398.0], [60.7, 18435.0], [60.8, 18445.0], [60.9, 18449.0], [61.0, 18471.0], [61.1, 18487.0], [61.2, 18491.0], [61.3, 18511.0], [61.4, 18517.0], [61.5, 18534.0], [61.6, 18545.0], [61.7, 18546.0], [61.8, 18547.0], [61.9, 18549.0], [62.0, 18549.0], [62.1, 18596.0], [62.2, 18601.0], [62.3, 18608.0], [62.4, 18618.0], [62.5, 18626.0], [62.6, 18640.0], [62.7, 18640.0], [62.8, 18648.0], [62.9, 18667.0], [63.0, 18707.0], [63.1, 18757.0], [63.2, 18758.0], [63.3, 18783.0], [63.4, 18791.0], [63.5, 18792.0], [63.6, 18802.0], [63.7, 18803.0], [63.8, 18807.0], [63.9, 18809.0], [64.0, 18822.0], [64.1, 18850.0], [64.2, 18872.0], [64.3, 18874.0], [64.4, 18874.0], [64.5, 18887.0], [64.6, 18947.0], [64.7, 18951.0], [64.8, 18959.0], [64.9, 18965.0], [65.0, 18980.0], [65.1, 19010.0], [65.2, 19015.0], [65.3, 19020.0], [65.4, 19035.0], [65.5, 19044.0], [65.6, 19050.0], [65.7, 19074.0], [65.8, 19083.0], [65.9, 19116.0], [66.0, 19130.0], [66.1, 19132.0], [66.2, 19133.0], [66.3, 19133.0], [66.4, 19139.0], [66.5, 19155.0], [66.6, 19166.0], [66.7, 19188.0], [66.8, 19201.0], [66.9, 19218.0], [67.0, 19226.0], [67.1, 19236.0], [67.2, 19238.0], [67.3, 19238.0], [67.4, 19254.0], [67.5, 19258.0], [67.6, 19271.0], [67.7, 19271.0], [67.8, 19274.0], [67.9, 19280.0], [68.0, 19282.0], [68.1, 19285.0], [68.2, 19298.0], [68.3, 19311.0], [68.4, 19314.0], [68.5, 19317.0], [68.6, 19322.0], [68.7, 19330.0], [68.8, 19332.0], [68.9, 19333.0], [69.0, 19347.0], [69.1, 19358.0], [69.2, 19361.0], [69.3, 19366.0], [69.4, 19374.0], [69.5, 19382.0], [69.6, 19417.0], [69.7, 19448.0], [69.8, 19466.0], [69.9, 19467.0], [70.0, 19475.0], [70.1, 19504.0], [70.2, 19512.0], [70.3, 19525.0], [70.4, 19541.0], [70.5, 19553.0], [70.6, 19584.0], [70.7, 19587.0], [70.8, 19592.0], [70.9, 19592.0], [71.0, 19601.0], [71.1, 19627.0], [71.2, 19650.0], [71.3, 19669.0], [71.4, 19677.0], [71.5, 19695.0], [71.6, 19766.0], [71.7, 19768.0], [71.8, 19771.0], [71.9, 19779.0], [72.0, 19783.0], [72.1, 19796.0], [72.2, 19807.0], [72.3, 19816.0], [72.4, 19818.0], [72.5, 19846.0], [72.6, 19872.0], [72.7, 19888.0], [72.8, 19889.0], [72.9, 19916.0], [73.0, 19926.0], [73.1, 19945.0], [73.2, 19946.0], [73.3, 19947.0], [73.4, 19971.0], [73.5, 20024.0], [73.6, 20144.0], [73.7, 20258.0], [73.8, 20261.0], [73.9, 20302.0], [74.0, 20316.0], [74.1, 20398.0], [74.2, 20417.0], [74.3, 20418.0], [74.4, 20430.0], [74.5, 20490.0], [74.6, 20607.0], [74.7, 20628.0], [74.8, 20642.0], [74.9, 20711.0], [75.0, 20740.0], [75.1, 20753.0], [75.2, 20756.0], [75.3, 20758.0], [75.4, 20800.0], [75.5, 20804.0], [75.6, 20824.0], [75.7, 20829.0], [75.8, 20861.0], [75.9, 20871.0], [76.0, 20892.0], [76.1, 20937.0], [76.2, 20967.0], [76.3, 20987.0], [76.4, 21001.0], [76.5, 21005.0], [76.6, 21040.0], [76.7, 21068.0], [76.8, 21080.0], [76.9, 21115.0], [77.0, 21173.0], [77.1, 21207.0], [77.2, 21241.0], [77.3, 21255.0], [77.4, 21286.0], [77.5, 21353.0], [77.6, 21355.0], [77.7, 21439.0], [77.8, 21441.0], [77.9, 21647.0], [78.0, 21774.0], [78.1, 21810.0], [78.2, 21818.0], [78.3, 21883.0], [78.4, 21911.0], [78.5, 21979.0], [78.6, 22016.0], [78.7, 22038.0], [78.8, 22444.0], [78.9, 22513.0], [79.0, 22546.0], [79.1, 22588.0], [79.2, 22652.0], [79.3, 22671.0], [79.4, 22718.0], [79.5, 22746.0], [79.6, 23059.0], [79.7, 23904.0], [79.8, 23953.0], [79.9, 23964.0], [80.0, 23970.0], [80.1, 24002.0], [80.2, 24608.0], [80.3, 24882.0], [80.4, 24914.0], [80.5, 25066.0], [80.6, 25071.0], [80.7, 25136.0], [80.8, 25157.0], [80.9, 25197.0], [81.0, 25322.0], [81.1, 25416.0], [81.2, 25468.0], [81.3, 25552.0], [81.4, 25579.0], [81.5, 26364.0], [81.6, 26536.0], [81.7, 26542.0], [81.8, 26579.0], [81.9, 26737.0], [82.0, 26754.0], [82.1, 26761.0], [82.2, 26768.0], [82.3, 26772.0], [82.4, 26782.0], [82.5, 26836.0], [82.6, 26865.0], [82.7, 27666.0], [82.8, 27698.0], [82.9, 27739.0], [83.0, 27803.0], [83.1, 27805.0], [83.2, 27837.0], [83.3, 27848.0], [83.4, 27853.0], [83.5, 27969.0], [83.6, 27990.0], [83.7, 28001.0], [83.8, 28070.0], [83.9, 28172.0], [84.0, 28275.0], [84.1, 28308.0], [84.2, 28355.0], [84.3, 28466.0], [84.4, 28518.0], [84.5, 28740.0], [84.6, 28821.0], [84.7, 28967.0], [84.8, 29006.0], [84.9, 29030.0], [85.0, 29200.0], [85.1, 29242.0], [85.2, 29378.0], [85.3, 29378.0], [85.4, 29412.0], [85.5, 29530.0], [85.6, 29648.0], [85.7, 29656.0], [85.8, 29657.0], [85.9, 29726.0], [86.0, 30046.0], [86.1, 30750.0], [86.2, 30750.0], [86.3, 30828.0], [86.4, 30876.0], [86.5, 30935.0], [86.6, 30993.0], [86.7, 31051.0], [86.8, 31177.0], [86.9, 31279.0], [87.0, 31330.0], [87.1, 31337.0], [87.2, 31356.0], [87.3, 31370.0], [87.4, 31379.0], [87.5, 31498.0], [87.6, 31541.0], [87.7, 31599.0], [87.8, 31640.0], [87.9, 31657.0], [88.0, 31752.0], [88.1, 31786.0], [88.2, 31802.0], [88.3, 31827.0], [88.4, 31854.0], [88.5, 32040.0], [88.6, 32099.0], [88.7, 32158.0], [88.8, 32169.0], [88.9, 32203.0], [89.0, 32359.0], [89.1, 32385.0], [89.2, 32460.0], [89.3, 32469.0], [89.4, 32473.0], [89.5, 32545.0], [89.6, 32652.0], [89.7, 32668.0], [89.8, 32708.0], [89.9, 32727.0], [90.0, 32808.0], [90.1, 32960.0], [90.2, 33163.0], [90.3, 33175.0], [90.4, 33195.0], [90.5, 33278.0], [90.6, 33284.0], [90.7, 33291.0], [90.8, 33331.0], [90.9, 33339.0], [91.0, 33399.0], [91.1, 33404.0], [91.2, 33410.0], [91.3, 33427.0], [91.4, 33439.0], [91.5, 33480.0], [91.6, 33491.0], [91.7, 33542.0], [91.8, 33568.0], [91.9, 33618.0], [92.0, 33683.0], [92.1, 33725.0], [92.2, 33789.0], [92.3, 33825.0], [92.4, 33884.0], [92.5, 34061.0], [92.6, 34175.0], [92.7, 34194.0], [92.8, 34308.0], [92.9, 34324.0], [93.0, 34403.0], [93.1, 34457.0], [93.2, 34629.0], [93.3, 34631.0], [93.4, 34633.0], [93.5, 34678.0], [93.6, 34683.0], [93.7, 34721.0], [93.8, 34740.0], [93.9, 34779.0], [94.0, 35447.0], [94.1, 35456.0], [94.2, 35462.0], [94.3, 35485.0], [94.4, 35492.0], [94.5, 35498.0], [94.6, 35500.0], [94.7, 35505.0], [94.8, 35520.0], [94.9, 35542.0], [95.0, 35555.0], [95.1, 35559.0], [95.2, 35559.0], [95.3, 35561.0], [95.4, 35573.0], [95.5, 35825.0], [95.6, 35834.0], [95.7, 35847.0], [95.8, 35849.0], [95.9, 35896.0], [96.0, 35968.0], [96.1, 35978.0], [96.2, 35987.0], [96.3, 36006.0], [96.4, 36013.0], [96.5, 36083.0], [96.6, 36111.0], [96.7, 36166.0], [96.8, 36182.0], [96.9, 36223.0], [97.0, 36251.0], [97.1, 36253.0], [97.2, 36313.0], [97.3, 36377.0], [97.4, 36392.0], [97.5, 36408.0], [97.6, 36412.0], [97.7, 36444.0], [97.8, 36487.0], [97.9, 36664.0], [98.0, 36757.0], [98.1, 36758.0], [98.2, 36804.0], [98.3, 36846.0], [98.4, 36894.0], [98.5, 36951.0], [98.6, 36991.0], [98.7, 37033.0], [98.8, 37049.0], [98.9, 37184.0], [99.0, 37535.0], [99.1, 38341.0], [99.2, 40839.0], [99.3, 41334.0], [99.4, 42087.0], [99.5, 43033.0], [99.6, 43749.0], [99.7, 44070.0], [99.8, 44414.0], [99.9, 46177.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 1600.0, "maxY": 18.0, "series": [{"data": [[33700.0, 2.0], [33300.0, 4.0], [34100.0, 2.0], [32900.0, 1.0], [34900.0, 1.0], [36100.0, 3.0], [36900.0, 3.0], [41300.0, 1.0], [43700.0, 1.0], [46100.0, 1.0], [1600.0, 1.0], [2100.0, 1.0], [2400.0, 1.0], [2600.0, 2.0], [2700.0, 1.0], [2800.0, 3.0], [2900.0, 3.0], [3000.0, 5.0], [3100.0, 2.0], [3200.0, 1.0], [3400.0, 1.0], [3500.0, 1.0], [3900.0, 1.0], [4000.0, 4.0], [4100.0, 4.0], [4300.0, 1.0], [4200.0, 2.0], [4400.0, 1.0], [4500.0, 3.0], [4600.0, 1.0], [4700.0, 1.0], [4800.0, 3.0], [5000.0, 1.0], [4900.0, 1.0], [5100.0, 1.0], [5200.0, 2.0], [5300.0, 1.0], [5600.0, 2.0], [5500.0, 1.0], [5700.0, 2.0], [5800.0, 2.0], [6100.0, 2.0], [6000.0, 1.0], [6300.0, 2.0], [6200.0, 1.0], [6500.0, 3.0], [6600.0, 3.0], [6800.0, 5.0], [6700.0, 4.0], [6900.0, 6.0], [7000.0, 1.0], [7100.0, 2.0], [7400.0, 5.0], [7300.0, 4.0], [7200.0, 3.0], [7600.0, 6.0], [7500.0, 2.0], [7700.0, 4.0], [7900.0, 8.0], [7800.0, 4.0], [8100.0, 4.0], [8000.0, 2.0], [8500.0, 10.0], [8300.0, 10.0], [8200.0, 2.0], [8600.0, 10.0], [8700.0, 7.0], [8400.0, 9.0], [8800.0, 7.0], [8900.0, 6.0], [9100.0, 6.0], [9000.0, 4.0], [9200.0, 8.0], [9600.0, 10.0], [9700.0, 12.0], [9300.0, 8.0], [9500.0, 6.0], [9400.0, 12.0], [10100.0, 11.0], [9800.0, 3.0], [9900.0, 14.0], [10000.0, 6.0], [10200.0, 7.0], [10500.0, 7.0], [10400.0, 7.0], [10700.0, 6.0], [10300.0, 7.0], [10600.0, 2.0], [11200.0, 2.0], [10800.0, 5.0], [11100.0, 2.0], [11000.0, 2.0], [10900.0, 1.0], [11300.0, 8.0], [11600.0, 7.0], [11700.0, 2.0], [11500.0, 2.0], [11400.0, 3.0], [11900.0, 7.0], [12200.0, 3.0], [12100.0, 3.0], [11800.0, 3.0], [12000.0, 4.0], [12400.0, 2.0], [12600.0, 3.0], [12500.0, 6.0], [12700.0, 4.0], [12300.0, 3.0], [13300.0, 3.0], [12800.0, 3.0], [12900.0, 6.0], [13000.0, 1.0], [13100.0, 2.0], [13400.0, 4.0], [13500.0, 9.0], [13600.0, 7.0], [13800.0, 4.0], [13700.0, 2.0], [13900.0, 6.0], [14200.0, 7.0], [14300.0, 7.0], [14000.0, 2.0], [14100.0, 2.0], [14400.0, 4.0], [14500.0, 6.0], [14600.0, 7.0], [14800.0, 12.0], [14700.0, 4.0], [14900.0, 13.0], [15000.0, 5.0], [15100.0, 5.0], [15200.0, 3.0], [15300.0, 5.0], [15400.0, 5.0], [15600.0, 10.0], [15700.0, 8.0], [15500.0, 7.0], [15800.0, 4.0], [16000.0, 5.0], [16200.0, 5.0], [16300.0, 7.0], [15900.0, 6.0], [16100.0, 9.0], [17200.0, 2.0], [16400.0, 7.0], [16600.0, 10.0], [16800.0, 11.0], [17000.0, 5.0], [17400.0, 4.0], [17800.0, 2.0], [18000.0, 11.0], [18200.0, 4.0], [18400.0, 7.0], [17600.0, 5.0], [19400.0, 7.0], [19000.0, 10.0], [18600.0, 9.0], [18800.0, 11.0], [19200.0, 18.0], [19600.0, 7.0], [19800.0, 8.0], [20400.0, 4.0], [20200.0, 2.0], [20000.0, 2.0], [21400.0, 2.0], [20800.0, 9.0], [20600.0, 3.0], [21000.0, 6.0], [21200.0, 5.0], [22400.0, 1.0], [21800.0, 3.0], [22000.0, 2.0], [21600.0, 2.0], [23000.0, 1.0], [22600.0, 2.0], [24000.0, 1.0], [25000.0, 3.0], [25400.0, 2.0], [25200.0, 1.0], [24800.0, 1.0], [24600.0, 1.0], [25800.0, 1.0], [27600.0, 2.0], [26800.0, 3.0], [28600.0, 1.0], [28400.0, 1.0], [28200.0, 2.0], [28000.0, 2.0], [27800.0, 5.0], [29000.0, 2.0], [29400.0, 1.0], [29600.0, 3.0], [28800.0, 1.0], [29200.0, 2.0], [30000.0, 1.0], [29800.0, 1.0], [31600.0, 2.0], [31400.0, 2.0], [31200.0, 1.0], [31000.0, 1.0], [30800.0, 2.0], [32600.0, 2.0], [32400.0, 3.0], [32000.0, 2.0], [32200.0, 2.0], [31800.0, 3.0], [33600.0, 3.0], [34400.0, 2.0], [33200.0, 4.0], [34000.0, 1.0], [32800.0, 1.0], [36000.0, 4.0], [36400.0, 4.0], [36800.0, 3.0], [40800.0, 1.0], [42000.0, 1.0], [44000.0, 1.0], [44400.0, 1.0], [34700.0, 3.0], [33500.0, 2.0], [34300.0, 3.0], [33100.0, 3.0], [35500.0, 10.0], [35900.0, 4.0], [36300.0, 4.0], [36700.0, 2.0], [37500.0, 2.0], [38300.0, 1.0], [37100.0, 1.0], [42700.0, 1.0], [47100.0, 1.0], [16500.0, 11.0], [16700.0, 15.0], [17100.0, 6.0], [16900.0, 7.0], [17300.0, 11.0], [17500.0, 6.0], [17700.0, 4.0], [17900.0, 3.0], [18100.0, 5.0], [18300.0, 7.0], [19300.0, 15.0], [18900.0, 6.0], [18500.0, 11.0], [19100.0, 11.0], [18700.0, 8.0], [19500.0, 10.0], [19700.0, 8.0], [20300.0, 4.0], [19900.0, 7.0], [20100.0, 1.0], [21300.0, 2.0], [20700.0, 6.0], [20900.0, 3.0], [20500.0, 1.0], [21100.0, 3.0], [22500.0, 4.0], [21900.0, 3.0], [21700.0, 1.0], [22700.0, 3.0], [23900.0, 5.0], [25100.0, 3.0], [25500.0, 2.0], [25300.0, 1.0], [24900.0, 1.0], [26300.0, 1.0], [26500.0, 3.0], [26700.0, 7.0], [28100.0, 1.0], [28500.0, 1.0], [28300.0, 2.0], [27900.0, 3.0], [27700.0, 2.0], [29500.0, 2.0], [29300.0, 2.0], [28900.0, 1.0], [28700.0, 1.0], [29100.0, 1.0], [30700.0, 2.0], [29700.0, 1.0], [30900.0, 3.0], [31500.0, 2.0], [31700.0, 3.0], [31300.0, 6.0], [31100.0, 1.0], [32500.0, 2.0], [32300.0, 2.0], [32700.0, 3.0], [32100.0, 2.0], [31900.0, 1.0], [33400.0, 7.0], [33800.0, 3.0], [34600.0, 6.0], [35400.0, 7.0], [35800.0, 6.0], [36200.0, 4.0], [36600.0, 2.0], [37000.0, 2.0], [43000.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 47100.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 21.0, "minX": 2.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1\u00A0500ms"], [2, "Requests having \nresponse time > 1\u00A0500ms"], [3, "Requests in error"]], "maxY": 1179.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1\u00A0500ms", "isController": false}, {"data": [[2.0, 1179.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1\u00A0500ms", "isController": false}, {"data": [[3.0, 21.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 59.71428571428572, "minX": 1.57623804E12, "maxY": 200.0, "series": [{"data": [[1.5762381E12, 185.71639344262303], [1.57623804E12, 200.0], [1.57623816E12, 59.71428571428572]], "isOverall": false, "label": "Children", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.57623816E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 2457.0, "minX": 1.0, "maxY": 28655.067415730337, "series": [{"data": [[2.0, 2850.0], [3.0, 2912.0], [4.0, 3156.0], [5.0, 3060.0], [6.0, 4252.0], [7.0, 2933.0], [8.0, 3428.0], [9.0, 4050.0], [10.0, 4126.0], [11.0, 4071.0], [12.0, 3208.0], [13.0, 2847.0], [14.0, 2658.0], [15.0, 3065.0], [16.0, 2822.0], [17.0, 2657.0], [18.0, 2457.0], [19.0, 3151.0], [20.0, 3035.0], [21.0, 3013.0], [22.0, 2762.0], [23.0, 2953.0], [24.0, 3091.0], [25.0, 3552.0], [26.0, 4148.0], [27.0, 4237.0], [28.0, 4311.0], [29.0, 4582.0], [30.0, 4673.0], [31.0, 4879.0], [33.0, 5898.0], [32.0, 5515.0], [35.0, 8436.0], [34.0, 6285.0], [37.0, 8376.0], [36.0, 8193.0], [39.0, 8659.0], [38.0, 8421.0], [41.0, 8397.0], [40.0, 8383.0], [43.0, 8643.0], [42.0, 8439.0], [45.0, 8546.0], [44.0, 6686.0], [47.0, 8550.0], [46.0, 8595.0], [49.0, 8696.0], [48.0, 8634.0], [50.0, 8752.0], [53.0, 18478.0], [52.0, 18894.0], [55.0, 19379.5], [54.0, 18802.0], [57.0, 19677.0], [56.0, 19779.0], [59.0, 20845.333333333332], [58.0, 12425.0], [61.0, 21017.333333333332], [60.0, 18598.666666666664], [63.0, 7988.0], [62.0, 20987.0], [67.0, 7086.5], [66.0, 7567.0], [65.0, 20296.777777777777], [64.0, 14268.5], [71.0, 16122.5], [70.0, 6708.0], [69.0, 6980.0], [68.0, 7398.0], [75.0, 21945.0], [74.0, 6850.0], [73.0, 11671.0], [72.0, 20937.0], [79.0, 5799.0], [78.0, 24898.0], [77.0, 15699.0], [76.0, 15477.5], [83.0, 5212.0], [82.0, 5400.0], [81.0, 5303.5], [80.0, 6093.0], [87.0, 9433.0], [86.0, 4545.0], [85.0, 5005.0], [84.0, 12955.0], [91.0, 9289.0], [90.0, 4800.0], [89.0, 4595.0], [88.0, 9389.0], [95.0, 8886.5], [94.0, 7080.5], [93.0, 9565.0], [92.0, 9214.0], [99.0, 4067.0], [98.0, 4052.0], [97.0, 10317.0], [96.0, 4045.0], [103.0, 10835.0], [102.0, 10460.0], [101.0, 7435.5], [100.0, 10436.0], [107.0, 11576.0], [106.0, 11697.0], [105.0, 14248.0], [104.0, 11053.0], [111.0, 20024.0], [110.0, 16940.0], [109.0, 18204.5], [108.0, 11381.0], [115.0, 16448.0], [114.0, 20086.0], [113.0, 19842.5], [112.0, 19942.0], [119.0, 16994.0], [118.0, 18106.0], [117.0, 19816.0], [116.0, 15352.0], [123.0, 18682.0], [121.0, 19872.0], [120.0, 17976.0], [127.0, 19262.5], [126.0, 19256.0], [125.0, 19309.0], [124.0, 19152.5], [135.0, 19132.0], [134.0, 19005.0], [133.0, 19288.75], [132.0, 19129.25], [131.0, 14903.0], [130.0, 14959.0], [129.0, 19303.0], [128.0, 19264.0], [143.0, 18792.5], [142.0, 18841.0], [141.0, 25262.4], [140.0, 18786.5], [139.0, 18743.333333333332], [138.0, 18546.0], [137.0, 18859.5], [136.0, 19139.0], [151.0, 17456.0], [150.0, 16097.0], [149.0, 18145.0], [148.0, 15701.0], [147.0, 17263.0], [146.0, 18859.0], [145.0, 18944.333333333332], [144.0, 18927.5], [159.0, 26748.5], [158.0, 26770.0], [157.0, 18430.5], [156.0, 18488.5], [155.0, 16001.0], [154.0, 16002.5], [153.0, 16382.5], [152.0, 18824.5], [167.0, 11823.5], [166.0, 12410.5], [165.0, 12584.333333333334], [164.0, 12312.0], [163.0, 23264.5], [162.0, 26732.333333333332], [161.0, 26865.0], [160.0, 26828.0], [175.0, 10222.666666666666], [174.0, 10370.0], [173.0, 10521.0], [172.0, 10523.333333333334], [171.0, 10755.0], [170.0, 10820.0], [169.0, 11232.0], [168.0, 11385.5], [183.0, 8251.0], [182.0, 7963.999999999999], [181.0, 13606.428571428572], [180.0, 9307.0], [179.0, 9554.0], [178.0, 10029.333333333334], [177.0, 9782.0], [176.0, 9968.5], [191.0, 9446.0], [190.0, 9443.0], [189.0, 7642.0], [188.0, 7569.555555555556], [187.0, 10023.0], [186.0, 10120.666666666666], [185.0, 10140.0], [184.0, 9988.0], [199.0, 23590.166666666664], [198.0, 28655.067415730337], [197.0, 11514.0], [196.0, 11477.0], [195.0, 11144.0], [194.0, 10935.5], [193.0, 17435.75], [192.0, 9392.333333333332], [200.0, 18060.491666666658], [1.0, 21005.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[175.5541666666666, 17609.332500000026]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 200.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 425.3333333333333, "minX": 1.57623804E12, "maxY": 324824.8333333333, "series": [{"data": [[1.5762381E12, 324824.8333333333], [1.57623804E12, 238934.63333333333], [1.57623816E12, 79159.76666666666]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.5762381E12, 1786.4], [1.57623804E12, 1299.4666666666667], [1.57623816E12, 425.3333333333333]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.57623816E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 10776.374149659869, "minX": 1.57623804E12, "maxY": 19015.337704918016, "series": [{"data": [[1.5762381E12, 19015.337704918016], [1.57623804E12, 17940.668171557547], [1.57623816E12, 10776.374149659869]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.57623816E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 9276.251700680274, "minX": 1.57623804E12, "maxY": 16438.677049180325, "series": [{"data": [[1.5762381E12, 16438.677049180325], [1.57623804E12, 14832.860045146734], [1.57623816E12, 9276.251700680274]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.57623816E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 4275.081264108356, "minX": 1.57623804E12, "maxY": 4891.761904761905, "series": [{"data": [[1.5762381E12, 4473.749180327879], [1.57623804E12, 4275.081264108356], [1.57623816E12, 4891.761904761905]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.57623816E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 1619.0, "minX": 1.57623804E12, "maxY": 47172.0, "series": [{"data": [[1.5762381E12, 47172.0], [1.57623804E12, 44070.0], [1.57623816E12, 25468.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.5762381E12, 6796.0], [1.57623804E12, 1619.0], [1.57623816E12, 2457.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.5762381E12, 31835.100000000002], [1.57623804E12, 35495.3], [1.57623816E12, 21158.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.5762381E12, 42106.40999999998], [1.57623804E12, 36928.770000000004], [1.57623816E12, 25285.379999999997]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.5762381E12, 33410.549999999996], [1.57623804E12, 36014.049999999996], [1.57623816E12, 21413.8]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.57623816E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 8206.5, "minX": 1.0, "maxY": 33407.0, "series": [{"data": [[2.0, 16687.0], [34.0, 18364.0], [35.0, 18873.5], [3.0, 9720.0], [50.0, 18862.0], [4.0, 13223.5], [66.0, 31114.0], [5.0, 16188.5], [6.0, 12575.5], [7.0, 17066.0], [8.0, 11823.5], [9.0, 9335.0], [10.0, 14931.0], [11.0, 13599.5], [12.0, 15759.5], [13.0, 13562.5], [14.0, 9866.0], [15.0, 14109.5], [1.0, 10835.0], [16.0, 9663.0], [18.0, 18209.5], [19.0, 21080.0], [20.0, 14918.5], [21.0, 16554.0], [22.0, 8206.5], [23.0, 25818.0], [24.0, 33407.0], [25.0, 10157.0], [26.0, 32732.5], [28.0, 19248.0], [29.0, 8964.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[2.0, 21020.0], [1.0, 21005.0], [10.0, 21001.0], [21.0, 11340.0], [14.0, 9777.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 66.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 24964.5, "series": [{"data": [[2.0, 16486.0], [34.0, 16620.5], [35.0, 15726.5], [3.0, 5483.0], [50.0, 16778.0], [4.0, 10604.5], [66.0, 24964.5], [5.0, 15157.0], [6.0, 12412.5], [7.0, 15808.0], [8.0, 11775.5], [9.0, 9226.0], [10.0, 14540.0], [11.0, 13573.5], [12.0, 15640.5], [13.0, 13415.5], [14.0, 9866.0], [15.0, 10007.5], [1.0, 8671.0], [16.0, 9632.5], [18.0, 16412.0], [19.0, 16842.0], [20.0, 12180.5], [21.0, 14230.0], [22.0, 8172.5], [23.0, 22452.0], [24.0, 22805.0], [25.0, 10121.0], [26.0, 23343.0], [28.0, 16983.0], [29.0, 8850.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[2.0, 0.0], [1.0, 0.0], [10.0, 0.0], [21.0, 11340.0], [14.0, 9777.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 66.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.6, "minX": 1.57623804E12, "maxY": 10.716666666666667, "series": [{"data": [[1.5762381E12, 8.683333333333334], [1.57623804E12, 10.716666666666667], [1.57623816E12, 0.6]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.57623816E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.57623804E12, "maxY": 9.933333333333334, "series": [{"data": [[1.5762381E12, 9.933333333333334], [1.57623804E12, 7.3], [1.57623816E12, 2.4166666666666665]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.5762381E12, 0.11666666666666667], [1.57623804E12, 0.08333333333333333]], "isOverall": false, "label": "500", "isController": false}, {"data": [[1.5762381E12, 0.016666666666666666], [1.57623816E12, 0.03333333333333333]], "isOverall": false, "label": "Non HTTP response code: org.apache.http.conn.HttpHostConnectException", "isController": false}, {"data": [[1.5762381E12, 0.1]], "isOverall": false, "label": "404", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.57623816E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.03333333333333333, "minX": 1.57623804E12, "maxY": 9.933333333333334, "series": [{"data": [[1.5762381E12, 9.933333333333334], [1.57623804E12, 7.3], [1.57623816E12, 2.4166666666666665]], "isOverall": false, "label": "HTTP Request-success", "isController": false}, {"data": [[1.5762381E12, 0.23333333333333334], [1.57623804E12, 0.08333333333333333], [1.57623816E12, 0.03333333333333333]], "isOverall": false, "label": "HTTP Request-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.57623816E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.03333333333333333, "minX": 1.57623804E12, "maxY": 9.933333333333334, "series": [{"data": [[1.5762381E12, 9.933333333333334], [1.57623804E12, 7.3], [1.57623816E12, 2.4166666666666665]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.5762381E12, 0.23333333333333334], [1.57623804E12, 0.08333333333333333], [1.57623816E12, 0.03333333333333333]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.57623816E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

